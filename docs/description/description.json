[
    {
        "patternId": "AIR001_airflow-variable-name-task-id-mismatch",
        "title": "airflow-variable-name-task-id-mismatch (AIR001)",
        "description": "Checks that the task variable name matches the task_id value for\nAirflow Operators."
    },
    {
        "patternId": "ERA001_commented-out-code",
        "title": "commented-out-code (ERA001)",
        "description": "Checks for commented-out Python code."
    },
    {
        "patternId": "FAST001_fast-api-redundant-response-model",
        "title": "fast-api-redundant-response-model (FAST001)",
        "description": "Checks for FastAPI routes that use the optional response_model parameter\nwith the same type as the return type."
    },
    {
        "patternId": "FAST002_fast-api-non-annotated-dependency",
        "title": "fast-api-non-annotated-dependency (FAST002)",
        "description": "Identifies FastAPI routes with deprecated uses of Depends or similar."
    },
    {
        "patternId": "YTT101_sys-version-slice3",
        "title": "sys-version-slice3 (YTT101)",
        "description": "Checks for uses of sys.version[:3]."
    },
    {
        "patternId": "YTT102_sys-version2",
        "title": "sys-version2 (YTT102)",
        "description": "Checks for uses of sys.version[2]."
    },
    {
        "patternId": "YTT103_sys-version-cmp-str3",
        "title": "sys-version-cmp-str3 (YTT103)",
        "description": "Checks for comparisons that test sys.version against string literals,\nsuch that the comparison will evaluate to False on Python 3.10 or later."
    },
    {
        "patternId": "YTT201_sys-version-info0-eq3",
        "title": "sys-version-info0-eq3 (YTT201)",
        "description": "Checks for equality comparisons against the major version returned by\nsys.version_info (e.g., sys.version_info[0] == 3)."
    },
    {
        "patternId": "YTT202_six-py3",
        "title": "six-py3 (YTT202)",
        "description": "Checks for uses of six.PY3."
    },
    {
        "patternId": "YTT203_sys-version-info1-cmp-int",
        "title": "sys-version-info1-cmp-int (YTT203)",
        "description": "Checks for comparisons that test sys.version_info[1] against an integer."
    },
    {
        "patternId": "YTT204_sys-version-info-minor-cmp-int",
        "title": "sys-version-info-minor-cmp-int (YTT204)",
        "description": "Checks for comparisons that test sys.version_info.minor against an integer."
    },
    {
        "patternId": "YTT301_sys-version0",
        "title": "sys-version0 (YTT301)",
        "description": "Checks for uses of sys.version[0]."
    },
    {
        "patternId": "YTT302_sys-version-cmp-str10",
        "title": "sys-version-cmp-str10 (YTT302)",
        "description": "Checks for comparisons that test sys.version against string literals,\nsuch that the comparison would fail if the major version number were\never incremented to Python 10 or higher."
    },
    {
        "patternId": "YTT303_sys-version-slice1",
        "title": "sys-version-slice1 (YTT303)",
        "description": "Checks for uses of sys.version[:1]."
    },
    {
        "patternId": "ANN001_missing-type-function-argument",
        "title": "missing-type-function-argument (ANN001)",
        "description": "Checks that function arguments have type annotations."
    },
    {
        "patternId": "ANN002_missing-type-args",
        "title": "missing-type-args (ANN002)",
        "description": "Checks that function *args arguments have type annotations."
    },
    {
        "patternId": "ANN003_missing-type-kwargs",
        "title": "missing-type-kwargs (ANN003)",
        "description": "Checks that function **kwargs arguments have type annotations."
    },
    {
        "patternId": "ANN201_missing-return-type-undocumented-public-function",
        "title": "missing-return-type-undocumented-public-function (ANN201)",
        "description": "Checks that public functions and methods have return type annotations."
    },
    {
        "patternId": "ANN202_missing-return-type-private-function",
        "title": "missing-return-type-private-function (ANN202)",
        "description": "Checks that private functions and methods have return type annotations."
    },
    {
        "patternId": "ANN204_missing-return-type-special-method",
        "title": "missing-return-type-special-method (ANN204)",
        "description": "Checks that \"special\" methods, like __init__, __new__, and __call__, have\nreturn type annotations."
    },
    {
        "patternId": "ANN205_missing-return-type-static-method",
        "title": "missing-return-type-static-method (ANN205)",
        "description": "Checks that static methods have return type annotations."
    },
    {
        "patternId": "ANN206_missing-return-type-class-method",
        "title": "missing-return-type-class-method (ANN206)",
        "description": "Checks that class methods have return type annotations."
    },
    {
        "patternId": "ANN401_any-type",
        "title": "any-type (ANN401)",
        "description": "Checks that function arguments are annotated with a more specific type than\nAny."
    },
    {
        "patternId": "ASYNC100_cancel-scope-no-checkpoint",
        "title": "cancel-scope-no-checkpoint (ASYNC100)",
        "description": "Checks for timeout context managers which do not contain a checkpoint.\nFor the purposes of this check, yield is considered a checkpoint,\nsince checkpoints may occur in the caller to which we yield."
    },
    {
        "patternId": "ASYNC105_trio-sync-call",
        "title": "trio-sync-call (ASYNC105)",
        "description": "Checks for calls to trio functions that are not immediately awaited."
    },
    {
        "patternId": "ASYNC109_async-function-with-timeout",
        "title": "async-function-with-timeout (ASYNC109)",
        "description": "Checks for async function definitions with timeout parameters."
    },
    {
        "patternId": "ASYNC110_async-busy-wait",
        "title": "async-busy-wait (ASYNC110)",
        "description": "Checks for the use of an async sleep function in a while loop."
    },
    {
        "patternId": "ASYNC115_async-zero-sleep",
        "title": "async-zero-sleep (ASYNC115)",
        "description": "Checks for uses of trio.sleep(0) or anyio.sleep(0)."
    },
    {
        "patternId": "ASYNC210_blocking-http-call-in-async-function",
        "title": "blocking-http-call-in-async-function (ASYNC210)",
        "description": "Checks that async functions do not contain blocking HTTP calls."
    },
    {
        "patternId": "ASYNC220_create-subprocess-in-async-function",
        "title": "create-subprocess-in-async-function (ASYNC220)",
        "description": "Checks that async functions do not create subprocesses with blocking methods."
    },
    {
        "patternId": "ASYNC221_run-process-in-async-function",
        "title": "run-process-in-async-function (ASYNC221)",
        "description": "Checks that async functions do not run processes with blocking methods."
    },
    {
        "patternId": "ASYNC222_wait-for-process-in-async-function",
        "title": "wait-for-process-in-async-function (ASYNC222)",
        "description": "Checks that async functions do not wait on processes with blocking methods."
    },
    {
        "patternId": "ASYNC230_blocking-open-call-in-async-function",
        "title": "blocking-open-call-in-async-function (ASYNC230)",
        "description": "Checks that async functions do not open files with blocking methods like open."
    },
    {
        "patternId": "ASYNC251_blocking-sleep-in-async-function",
        "title": "blocking-sleep-in-async-function (ASYNC251)",
        "description": "Checks that async functions do not call time.sleep."
    },
    {
        "patternId": "S101_assert",
        "title": "assert (S101)",
        "description": "Checks for uses of the assert keyword."
    },
    {
        "patternId": "S102_exec-builtin",
        "title": "exec-builtin (S102)",
        "description": "Checks for uses of the builtin exec function."
    },
    {
        "patternId": "S103_bad-file-permissions",
        "title": "bad-file-permissions (S103)",
        "description": "Checks for files with overly permissive permissions."
    },
    {
        "patternId": "S104_hardcoded-bind-all-interfaces",
        "title": "hardcoded-bind-all-interfaces (S104)",
        "description": "Checks for hardcoded bindings to all network interfaces (0.0.0.0)."
    },
    {
        "patternId": "S105_hardcoded-password-string",
        "title": "hardcoded-password-string (S105)",
        "description": "Checks for potential uses of hardcoded passwords in strings."
    },
    {
        "patternId": "S106_hardcoded-password-func-arg",
        "title": "hardcoded-password-func-arg (S106)",
        "description": "Checks for potential uses of hardcoded passwords in function calls."
    },
    {
        "patternId": "S107_hardcoded-password-default",
        "title": "hardcoded-password-default (S107)",
        "description": "Checks for potential uses of hardcoded passwords in function argument\ndefaults."
    },
    {
        "patternId": "S108_hardcoded-temp-file",
        "title": "hardcoded-temp-file (S108)",
        "description": "Checks for the use of hardcoded temporary file or directory paths."
    },
    {
        "patternId": "S110_try-except-pass",
        "title": "try-except-pass (S110)",
        "description": "Checks for uses of the try-except-pass pattern."
    },
    {
        "patternId": "S112_try-except-continue",
        "title": "try-except-continue (S112)",
        "description": "Checks for uses of the try-except-continue pattern."
    },
    {
        "patternId": "S113_request-without-timeout",
        "title": "request-without-timeout (S113)",
        "description": "Checks for uses of the Python requests or httpx module that omit the\ntimeout parameter."
    },
    {
        "patternId": "S201_flask-debug-true",
        "title": "flask-debug-true (S201)",
        "description": "Checks for uses of debug=True in Flask."
    },
    {
        "patternId": "S202_tarfile-unsafe-members",
        "title": "tarfile-unsafe-members (S202)",
        "description": "Checks for uses of tarfile.extractall."
    },
    {
        "patternId": "S301_suspicious-pickle-usage",
        "title": "suspicious-pickle-usage (S301)",
        "description": "Checks for calls to pickle functions or modules that wrap them."
    },
    {
        "patternId": "S302_suspicious-marshal-usage",
        "title": "suspicious-marshal-usage (S302)",
        "description": "Checks for calls to marshal functions."
    },
    {
        "patternId": "S303_suspicious-insecure-hash-usage",
        "title": "suspicious-insecure-hash-usage (S303)",
        "description": "Checks for uses of weak or broken cryptographic hash functions."
    },
    {
        "patternId": "S304_suspicious-insecure-cipher-usage",
        "title": "suspicious-insecure-cipher-usage (S304)",
        "description": "Checks for uses of weak or broken cryptographic ciphers."
    },
    {
        "patternId": "S305_suspicious-insecure-cipher-mode-usage",
        "title": "suspicious-insecure-cipher-mode-usage (S305)",
        "description": "Checks for uses of weak or broken cryptographic cipher modes."
    },
    {
        "patternId": "S306_suspicious-mktemp-usage",
        "title": "suspicious-mktemp-usage (S306)",
        "description": "Checks for uses of tempfile.mktemp."
    },
    {
        "patternId": "S307_suspicious-eval-usage",
        "title": "suspicious-eval-usage (S307)",
        "description": "Checks for uses of the builtin eval() function."
    },
    {
        "patternId": "S308_suspicious-mark-safe-usage",
        "title": "suspicious-mark-safe-usage (S308)",
        "description": "Checks for uses of calls to django.utils.safestring.mark_safe."
    },
    {
        "patternId": "S310_suspicious-url-open-usage",
        "title": "suspicious-url-open-usage (S310)",
        "description": "Checks for instances where URL open functions are used with unexpected schemes."
    },
    {
        "patternId": "S311_suspicious-non-cryptographic-random-usage",
        "title": "suspicious-non-cryptographic-random-usage (S311)",
        "description": "Checks for uses of cryptographically weak pseudo-random number generators."
    },
    {
        "patternId": "S312_suspicious-telnet-usage",
        "title": "suspicious-telnet-usage (S312)",
        "description": "Checks for the use of Telnet-related functions."
    },
    {
        "patternId": "S313_suspicious-xmlc-element-tree-usage",
        "title": "suspicious-xmlc-element-tree-usage (S313)",
        "description": "Checks for uses of insecure XML parsers."
    },
    {
        "patternId": "S314_suspicious-xml-element-tree-usage",
        "title": "suspicious-xml-element-tree-usage (S314)",
        "description": "Checks for uses of insecure XML parsers."
    },
    {
        "patternId": "S315_suspicious-xml-expat-reader-usage",
        "title": "suspicious-xml-expat-reader-usage (S315)",
        "description": "Checks for uses of insecure XML parsers."
    },
    {
        "patternId": "S316_suspicious-xml-expat-builder-usage",
        "title": "suspicious-xml-expat-builder-usage (S316)",
        "description": "Checks for uses of insecure XML parsers."
    },
    {
        "patternId": "S317_suspicious-xml-sax-usage",
        "title": "suspicious-xml-sax-usage (S317)",
        "description": "Checks for uses of insecure XML parsers."
    },
    {
        "patternId": "S318_suspicious-xml-mini-dom-usage",
        "title": "suspicious-xml-mini-dom-usage (S318)",
        "description": "Checks for uses of insecure XML parsers."
    },
    {
        "patternId": "S319_suspicious-xml-pull-dom-usage",
        "title": "suspicious-xml-pull-dom-usage (S319)",
        "description": "Checks for uses of insecure XML parsers."
    },
    {
        "patternId": "S320_suspicious-xmle-tree-usage",
        "title": "suspicious-xmle-tree-usage (S320)",
        "description": "Checks for uses of insecure XML parsers."
    },
    {
        "patternId": "S321_suspicious-ftp-lib-usage",
        "title": "suspicious-ftp-lib-usage (S321)",
        "description": "Checks for the use of FTP-related functions."
    },
    {
        "patternId": "S323_suspicious-unverified-context-usage",
        "title": "suspicious-unverified-context-usage (S323)",
        "description": "Checks for uses of ssl._create_unverified_context."
    },
    {
        "patternId": "S324_hashlib-insecure-hash-function",
        "title": "hashlib-insecure-hash-function (S324)",
        "description": "Checks for uses of weak or broken cryptographic hash functions in\nhashlib and crypt libraries."
    },
    {
        "patternId": "S501_request-with-no-cert-validation",
        "title": "request-with-no-cert-validation (S501)",
        "description": "Checks for HTTPS requests that disable SSL certificate checks."
    },
    {
        "patternId": "S502_ssl-insecure-version",
        "title": "ssl-insecure-version (S502)",
        "description": "Checks for function calls with parameters that indicate the use of insecure\nSSL and TLS protocol versions."
    },
    {
        "patternId": "S503_ssl-with-bad-defaults",
        "title": "ssl-with-bad-defaults (S503)",
        "description": "Checks for function definitions with default arguments set to insecure SSL\nand TLS protocol versions."
    },
    {
        "patternId": "S504_ssl-with-no-version",
        "title": "ssl-with-no-version (S504)",
        "description": "Checks for calls to ssl.wrap_socket() without an ssl_version."
    },
    {
        "patternId": "S505_weak-cryptographic-key",
        "title": "weak-cryptographic-key (S505)",
        "description": "Checks for uses of cryptographic keys with vulnerable key sizes."
    },
    {
        "patternId": "S506_unsafe-yaml-load",
        "title": "unsafe-yaml-load (S506)",
        "description": "Checks for uses of the yaml.load function."
    },
    {
        "patternId": "S507_ssh-no-host-key-verification",
        "title": "ssh-no-host-key-verification (S507)",
        "description": "Checks for uses of policies disabling SSH verification in Paramiko."
    },
    {
        "patternId": "S508_snmp-insecure-version",
        "title": "snmp-insecure-version (S508)",
        "description": "Checks for uses of SNMPv1 or SNMPv2."
    },
    {
        "patternId": "S509_snmp-weak-cryptography",
        "title": "snmp-weak-cryptography (S509)",
        "description": "Checks for uses of the SNMPv3 protocol without encryption."
    },
    {
        "patternId": "S601_paramiko-call",
        "title": "paramiko-call (S601)",
        "description": "Checks for paramiko calls."
    },
    {
        "patternId": "S602_subprocess-popen-with-shell-equals-true",
        "title": "subprocess-popen-with-shell-equals-true (S602)",
        "description": "Check for method calls that initiate a subprocess with a shell."
    },
    {
        "patternId": "S603_subprocess-without-shell-equals-true",
        "title": "subprocess-without-shell-equals-true (S603)",
        "description": "Check for method calls that initiate a subprocess without a shell."
    },
    {
        "patternId": "S604_call-with-shell-equals-true",
        "title": "call-with-shell-equals-true (S604)",
        "description": "Checks for method calls that set the shell parameter to true or another\ntruthy value when invoking a subprocess."
    },
    {
        "patternId": "S605_start-process-with-a-shell",
        "title": "start-process-with-a-shell (S605)",
        "description": "Checks for calls that start a process with a shell, providing guidance on\nwhether the usage is safe or not."
    },
    {
        "patternId": "S606_start-process-with-no-shell",
        "title": "start-process-with-no-shell (S606)",
        "description": "Checks for functions that start a process without a shell."
    },
    {
        "patternId": "S607_start-process-with-partial-path",
        "title": "start-process-with-partial-path (S607)",
        "description": "Checks for the starting of a process with a partial executable path."
    },
    {
        "patternId": "S608_hardcoded-sql-expression",
        "title": "hardcoded-sql-expression (S608)",
        "description": "Checks for strings that resemble SQL statements involved in some form\nstring building operation."
    },
    {
        "patternId": "S609_unix-command-wildcard-injection",
        "title": "unix-command-wildcard-injection (S609)",
        "description": "Checks for possible wildcard injections in calls to subprocess.Popen()."
    },
    {
        "patternId": "S610_django-extra",
        "title": "django-extra (S610)",
        "description": "Checks for uses of Django's extra function where one or more arguments\npassed are not literal expressions."
    },
    {
        "patternId": "S611_django-raw-sql",
        "title": "django-raw-sql (S611)",
        "description": "Checks for uses of Django's RawSQL function."
    },
    {
        "patternId": "S612_logging-config-insecure-listen",
        "title": "logging-config-insecure-listen (S612)",
        "description": "Checks for insecure logging.config.listen calls."
    },
    {
        "patternId": "S701_jinja2-autoescape-false",
        "title": "jinja2-autoescape-false (S701)",
        "description": "Checks for jinja2 templates that use autoescape=False."
    },
    {
        "patternId": "S702_mako-templates",
        "title": "mako-templates (S702)",
        "description": "Checks for uses of the mako templates."
    },
    {
        "patternId": "BLE001_blind-except",
        "title": "blind-except (BLE001)",
        "description": "Checks for except clauses that catch all exceptions. This includes\nbare except, except BaseException and except Exception."
    },
    {
        "patternId": "FBT001_boolean-type-hint-positional-argument",
        "title": "boolean-type-hint-positional-argument (FBT001)",
        "description": "Checks for the use of boolean positional arguments in function definitions,\nas determined by the presence of a bool type hint."
    },
    {
        "patternId": "FBT002_boolean-default-value-positional-argument",
        "title": "boolean-default-value-positional-argument (FBT002)",
        "description": "Checks for the use of boolean positional arguments in function definitions,\nas determined by the presence of a boolean default value."
    },
    {
        "patternId": "FBT003_boolean-positional-value-in-call",
        "title": "boolean-positional-value-in-call (FBT003)",
        "description": "Checks for boolean positional arguments in function calls.\nSome functions are whitelisted by default. To extend the list of allowed calls\nconfigure the lint.flake8-boolean-trap.extend-allowed-calls option."
    },
    {
        "patternId": "B002_unary-prefix-increment-decrement",
        "title": "unary-prefix-increment-decrement (B002)",
        "description": "Checks for the attempted use of the unary prefix increment (++) or\ndecrement operator (--)."
    },
    {
        "patternId": "B003_assignment-to-os-environ",
        "title": "assignment-to-os-environ (B003)",
        "description": "Checks for assignments to os.environ."
    },
    {
        "patternId": "B004_unreliable-callable-check",
        "title": "unreliable-callable-check (B004)",
        "description": "Checks for uses of hasattr to test if an object is callable (e.g.,\nhasattr(obj, \"__call__\"))."
    },
    {
        "patternId": "B005_strip-with-multi-characters",
        "title": "strip-with-multi-characters (B005)",
        "description": "Checks for uses of multi-character strings in .strip(), .lstrip(), and\n.rstrip() calls."
    },
    {
        "patternId": "B006_mutable-argument-default",
        "title": "mutable-argument-default (B006)",
        "description": "Checks for uses of mutable objects as function argument defaults."
    },
    {
        "patternId": "B007_unused-loop-control-variable",
        "title": "unused-loop-control-variable (B007)",
        "description": "Checks for unused variables in loops (e.g., for and while statements)."
    },
    {
        "patternId": "B008_function-call-in-default-argument",
        "title": "function-call-in-default-argument (B008)",
        "description": "Checks for function calls in default function arguments."
    },
    {
        "patternId": "B009_get-attr-with-constant",
        "title": "get-attr-with-constant (B009)",
        "description": "Checks for uses of getattr that take a constant attribute value as an\nargument (e.g., getattr(obj, \"foo\"))."
    },
    {
        "patternId": "B010_set-attr-with-constant",
        "title": "set-attr-with-constant (B010)",
        "description": "Checks for uses of setattr that take a constant attribute value as an\nargument (e.g., setattr(obj, \"foo\", 42))."
    },
    {
        "patternId": "B011_assert-false",
        "title": "assert-false (B011)",
        "description": "Checks for uses of assert False."
    },
    {
        "patternId": "B012_jump-statement-in-finally",
        "title": "jump-statement-in-finally (B012)",
        "description": "Checks for break, continue, and return statements in finally\nblocks."
    },
    {
        "patternId": "B013_redundant-tuple-in-exception-handler",
        "title": "redundant-tuple-in-exception-handler (B013)",
        "description": "Checks for single-element tuples in exception handlers (e.g.,\nexcept (ValueError,):).\nNote: Single-element tuples consisting of a starred expression\nare allowed."
    },
    {
        "patternId": "B014_duplicate-handler-exception",
        "title": "duplicate-handler-exception (B014)",
        "description": "Checks for exception handlers that catch duplicate exceptions."
    },
    {
        "patternId": "B015_useless-comparison",
        "title": "useless-comparison (B015)",
        "description": "Checks for useless comparisons."
    },
    {
        "patternId": "B016_raise-literal",
        "title": "raise-literal (B016)",
        "description": "Checks for raise statements that raise a literal value."
    },
    {
        "patternId": "B017_assert-raises-exception",
        "title": "assert-raises-exception (B017)",
        "description": "Checks for assertRaises and pytest.raises context managers that catch\nException or BaseException."
    },
    {
        "patternId": "B018_useless-expression",
        "title": "useless-expression (B018)",
        "description": "Checks for useless expressions."
    },
    {
        "patternId": "B019_cached-instance-method",
        "title": "cached-instance-method (B019)",
        "description": "Checks for uses of the functools.lru_cache and functools.cache\ndecorators on methods."
    },
    {
        "patternId": "B020_loop-variable-overrides-iterator",
        "title": "loop-variable-overrides-iterator (B020)",
        "description": "Checks for loop control variables that override the loop iterable."
    },
    {
        "patternId": "B021_f-string-docstring",
        "title": "f-string-docstring (B021)",
        "description": "Checks for docstrings that are written via f-strings."
    },
    {
        "patternId": "B022_useless-contextlib-suppress",
        "title": "useless-contextlib-suppress (B022)",
        "description": "Checks for contextlib.suppress without arguments."
    },
    {
        "patternId": "B023_function-uses-loop-variable",
        "title": "function-uses-loop-variable (B023)",
        "description": "Checks for function definitions that use a loop variable."
    },
    {
        "patternId": "B024_abstract-base-class-without-abstract-method",
        "title": "abstract-base-class-without-abstract-method (B024)",
        "description": "Checks for abstract classes without abstract methods or properties.\nAnnotated but unassigned class variables are regarded as abstract."
    },
    {
        "patternId": "B025_duplicate-try-block-exception",
        "title": "duplicate-try-block-exception (B025)",
        "description": "Checks for try-except blocks with duplicate exception handlers."
    },
    {
        "patternId": "B026_star-arg-unpacking-after-keyword-arg",
        "title": "star-arg-unpacking-after-keyword-arg (B026)",
        "description": "Checks for function calls that use star-argument unpacking after providing a\nkeyword argument"
    },
    {
        "patternId": "B027_empty-method-without-abstract-decorator",
        "title": "empty-method-without-abstract-decorator (B027)",
        "description": "Checks for empty methods in abstract base classes without an abstract\ndecorator."
    },
    {
        "patternId": "B028_no-explicit-stacklevel",
        "title": "no-explicit-stacklevel (B028)",
        "description": "Checks for warnings.warn calls without an explicit stacklevel keyword\nargument."
    },
    {
        "patternId": "B029_except-with-empty-tuple",
        "title": "except-with-empty-tuple (B029)",
        "description": "Checks for exception handlers that catch an empty tuple."
    },
    {
        "patternId": "B030_except-with-non-exception-classes",
        "title": "except-with-non-exception-classes (B030)",
        "description": "Checks for exception handlers that catch non-exception classes."
    },
    {
        "patternId": "B031_reuse-of-groupby-generator",
        "title": "reuse-of-groupby-generator (B031)",
        "description": "Checks for multiple usage of the generator returned from\nitertools.groupby()."
    },
    {
        "patternId": "B032_unintentional-type-annotation",
        "title": "unintentional-type-annotation (B032)",
        "description": "Checks for the unintentional use of type annotations."
    },
    {
        "patternId": "B033_duplicate-value",
        "title": "duplicate-value (B033)",
        "description": "Checks for set literals that contain duplicate items."
    },
    {
        "patternId": "B034_re-sub-positional-args",
        "title": "re-sub-positional-args (B034)",
        "description": "Checks for calls to re.sub, re.subn, and re.split that pass count,\nmaxsplit, or flags as positional arguments."
    },
    {
        "patternId": "B035_static-key-dict-comprehension",
        "title": "static-key-dict-comprehension (B035)",
        "description": "Checks for dictionary comprehensions that use a static key, like a string\nliteral or a variable defined outside the comprehension."
    },
    {
        "patternId": "B039_mutable-contextvar-default",
        "title": "mutable-contextvar-default (B039)",
        "description": "Checks for uses of mutable objects as ContextVar defaults."
    },
    {
        "patternId": "B904_raise-without-from-inside-except",
        "title": "raise-without-from-inside-except (B904)",
        "description": "Checks for raise statements in exception handlers that lack a from\nclause."
    },
    {
        "patternId": "B905_zip-without-explicit-strict",
        "title": "zip-without-explicit-strict (B905)",
        "description": "Checks for zip calls without an explicit strict parameter."
    },
    {
        "patternId": "A001_builtin-variable-shadowing",
        "title": "builtin-variable-shadowing (A001)",
        "description": "Checks for variable (and function) assignments that use the same names\nas builtins."
    },
    {
        "patternId": "A002_builtin-argument-shadowing",
        "title": "builtin-argument-shadowing (A002)",
        "description": "Checks for function arguments that use the same names as builtins."
    },
    {
        "patternId": "A003_builtin-attribute-shadowing",
        "title": "builtin-attribute-shadowing (A003)",
        "description": "Checks for class attributes and methods that use the same names as\nPython builtins."
    },
    {
        "patternId": "A004_builtin-import-shadowing",
        "title": "builtin-import-shadowing (A004)",
        "description": "Checks for imports that use the same names as builtins."
    },
    {
        "patternId": "A005_stdlib-module-shadowing",
        "title": "stdlib-module-shadowing (A005)",
        "description": "Checks for modules that use the same names as Python standard-library\nmodules."
    },
    {
        "patternId": "A006_builtin-lambda-argument-shadowing",
        "title": "builtin-lambda-argument-shadowing (A006)",
        "description": "Checks for lambda arguments that use the same names as Python builtins."
    },
    {
        "patternId": "COM812_missing-trailing-comma",
        "title": "missing-trailing-comma (COM812)",
        "description": "Checks for the absence of trailing commas."
    },
    {
        "patternId": "COM818_trailing-comma-on-bare-tuple",
        "title": "trailing-comma-on-bare-tuple (COM818)",
        "description": "Checks for the presence of trailing commas on bare (i.e., unparenthesized)\ntuples."
    },
    {
        "patternId": "COM819_prohibited-trailing-comma",
        "title": "prohibited-trailing-comma (COM819)",
        "description": "Checks for the presence of prohibited trailing commas."
    },
    {
        "patternId": "C400_unnecessary-generator-list",
        "title": "unnecessary-generator-list (C400)",
        "description": "Checks for unnecessary generators that can be rewritten as list\ncomprehensions (or with list() directly)."
    },
    {
        "patternId": "C401_unnecessary-generator-set",
        "title": "unnecessary-generator-set (C401)",
        "description": "Checks for unnecessary generators that can be rewritten as set\ncomprehensions (or with set() directly)."
    },
    {
        "patternId": "C402_unnecessary-generator-dict",
        "title": "unnecessary-generator-dict (C402)",
        "description": "Checks for unnecessary generators that can be rewritten as dict\ncomprehensions."
    },
    {
        "patternId": "C403_unnecessary-list-comprehension-set",
        "title": "unnecessary-list-comprehension-set (C403)",
        "description": "Checks for unnecessary list comprehensions."
    },
    {
        "patternId": "C404_unnecessary-list-comprehension-dict",
        "title": "unnecessary-list-comprehension-dict (C404)",
        "description": "Checks for unnecessary list comprehensions."
    },
    {
        "patternId": "C405_unnecessary-literal-set",
        "title": "unnecessary-literal-set (C405)",
        "description": "Checks for set() calls that take unnecessary list or tuple literals\nas arguments."
    },
    {
        "patternId": "C406_unnecessary-literal-dict",
        "title": "unnecessary-literal-dict (C406)",
        "description": "Checks for unnecessary list or tuple literals."
    },
    {
        "patternId": "C408_unnecessary-collection-call",
        "title": "unnecessary-collection-call (C408)",
        "description": "Checks for unnecessary dict(), list() or tuple() calls that can be\nrewritten as empty literals."
    },
    {
        "patternId": "C409_unnecessary-literal-within-tuple-call",
        "title": "unnecessary-literal-within-tuple-call (C409)",
        "description": "Checks for tuple calls that take unnecessary list or tuple literals as\narguments. In preview, this also includes unnecessary list comprehensions\nwithin tuple calls."
    },
    {
        "patternId": "C410_unnecessary-literal-within-list-call",
        "title": "unnecessary-literal-within-list-call (C410)",
        "description": "Checks for list() calls that take unnecessary list or tuple literals as\narguments."
    },
    {
        "patternId": "C411_unnecessary-list-call",
        "title": "unnecessary-list-call (C411)",
        "description": "Checks for unnecessary list() calls around list comprehensions."
    },
    {
        "patternId": "C413_unnecessary-call-around-sorted",
        "title": "unnecessary-call-around-sorted (C413)",
        "description": "Checks for unnecessary list() or reversed() calls around sorted()\ncalls."
    },
    {
        "patternId": "C414_unnecessary-double-cast-or-process",
        "title": "unnecessary-double-cast-or-process (C414)",
        "description": "Checks for unnecessary list(), reversed(), set(), sorted(), and\ntuple() call within list(), set(), sorted(), and tuple() calls."
    },
    {
        "patternId": "C415_unnecessary-subscript-reversal",
        "title": "unnecessary-subscript-reversal (C415)",
        "description": "Checks for unnecessary subscript reversal of iterable."
    },
    {
        "patternId": "C416_unnecessary-comprehension",
        "title": "unnecessary-comprehension (C416)",
        "description": "Checks for unnecessary dict, list, and set comprehension."
    },
    {
        "patternId": "C417_unnecessary-map",
        "title": "unnecessary-map (C417)",
        "description": "Checks for unnecessary map() calls with lambda functions."
    },
    {
        "patternId": "C418_unnecessary-literal-within-dict-call",
        "title": "unnecessary-literal-within-dict-call (C418)",
        "description": "Checks for dict() calls that take unnecessary dict literals or dict\ncomprehensions as arguments."
    },
    {
        "patternId": "C419_unnecessary-comprehension-in-call",
        "title": "unnecessary-comprehension-in-call (C419)",
        "description": "Checks for unnecessary list or set comprehensions passed to builtin functions that take an iterable.\nSet comprehensions are only a violation in the case where the builtin function does not care about\nduplication of elements in the passed iterable."
    },
    {
        "patternId": "DTZ001_call-datetime-without-tzinfo",
        "title": "call-datetime-without-tzinfo (DTZ001)",
        "description": "Checks for datetime instantiations that do not specify a timezone."
    },
    {
        "patternId": "DTZ002_call-datetime-today",
        "title": "call-datetime-today (DTZ002)",
        "description": "Checks for usage of datetime.datetime.today()."
    },
    {
        "patternId": "DTZ003_call-datetime-utcnow",
        "title": "call-datetime-utcnow (DTZ003)",
        "description": "Checks for usage of datetime.datetime.utcnow()."
    },
    {
        "patternId": "DTZ004_call-datetime-utcfromtimestamp",
        "title": "call-datetime-utcfromtimestamp (DTZ004)",
        "description": "Checks for usage of datetime.datetime.utcfromtimestamp()."
    },
    {
        "patternId": "DTZ005_call-datetime-now-without-tzinfo",
        "title": "call-datetime-now-without-tzinfo (DTZ005)",
        "description": "Checks for usages of datetime.datetime.now() that do not specify a timezone."
    },
    {
        "patternId": "DTZ006_call-datetime-fromtimestamp",
        "title": "call-datetime-fromtimestamp (DTZ006)",
        "description": "Checks for usage of datetime.datetime.fromtimestamp() that do not specify\na timezone."
    },
    {
        "patternId": "DTZ007_call-datetime-strptime-without-zone",
        "title": "call-datetime-strptime-without-zone (DTZ007)",
        "description": "Checks for uses of datetime.datetime.strptime() that lead to naive\ndatetime objects."
    },
    {
        "patternId": "DTZ011_call-date-today",
        "title": "call-date-today (DTZ011)",
        "description": "Checks for usage of datetime.date.today()."
    },
    {
        "patternId": "DTZ012_call-date-fromtimestamp",
        "title": "call-date-fromtimestamp (DTZ012)",
        "description": "Checks for usage of datetime.date.fromtimestamp()."
    },
    {
        "patternId": "T100_debugger",
        "title": "debugger (T100)",
        "description": "Checks for the presence of debugger calls and imports."
    },
    {
        "patternId": "DJ001_django-nullable-model-string-field",
        "title": "django-nullable-model-string-field (DJ001)",
        "description": "Checks nullable string-based fields (like CharField and TextField)\nin Django models."
    },
    {
        "patternId": "DJ003_django-locals-in-render-function",
        "title": "django-locals-in-render-function (DJ003)",
        "description": "Checks for the use of locals() in render functions."
    },
    {
        "patternId": "DJ006_django-exclude-with-model-form",
        "title": "django-exclude-with-model-form (DJ006)",
        "description": "Checks for the use of exclude in Django ModelForm classes."
    },
    {
        "patternId": "DJ007_django-all-with-model-form",
        "title": "django-all-with-model-form (DJ007)",
        "description": "Checks for the use of fields = \"__all__\" in Django ModelForm\nclasses."
    },
    {
        "patternId": "DJ008_django-model-without-dunder-str",
        "title": "django-model-without-dunder-str (DJ008)",
        "description": "Checks that a __str__ method is defined in Django models."
    },
    {
        "patternId": "DJ012_django-unordered-body-content-in-model",
        "title": "django-unordered-body-content-in-model (DJ012)",
        "description": "Checks for the order of Model's inner classes, methods, and fields as per\nthe Django Style Guide."
    },
    {
        "patternId": "DJ013_django-non-leading-receiver-decorator",
        "title": "django-non-leading-receiver-decorator (DJ013)",
        "description": "Checks that Django's @receiver decorator is listed first, prior to\nany other decorators."
    },
    {
        "patternId": "EM101_raw-string-in-exception",
        "title": "raw-string-in-exception (EM101)",
        "description": "Checks for the use of string literals in exception constructors."
    },
    {
        "patternId": "EM102_f-string-in-exception",
        "title": "f-string-in-exception (EM102)",
        "description": "Checks for the use of f-strings in exception constructors."
    },
    {
        "patternId": "EM103_dot-format-in-exception",
        "title": "dot-format-in-exception (EM103)",
        "description": "Checks for the use of .format calls on string literals in exception\nconstructors."
    },
    {
        "patternId": "EXE001_shebang-not-executable",
        "title": "shebang-not-executable (EXE001)",
        "description": "Checks for a shebang directive in a file that is not executable."
    },
    {
        "patternId": "EXE002_shebang-missing-executable-file",
        "title": "shebang-missing-executable-file (EXE002)",
        "description": "Checks for executable .py files that do not have a shebang."
    },
    {
        "patternId": "EXE003_shebang-missing-python",
        "title": "shebang-missing-python (EXE003)",
        "description": "Checks for a shebang directive in .py files that does not contain python."
    },
    {
        "patternId": "EXE004_shebang-leading-whitespace",
        "title": "shebang-leading-whitespace (EXE004)",
        "description": "Checks for whitespace before a shebang directive."
    },
    {
        "patternId": "EXE005_shebang-not-first-line",
        "title": "shebang-not-first-line (EXE005)",
        "description": "Checks for a shebang directive that is not at the beginning of the file."
    },
    {
        "patternId": "FIX001_line-contains-fixme",
        "title": "line-contains-fixme (FIX001)",
        "description": "Checks for \"FIXME\" comments."
    },
    {
        "patternId": "FIX002_line-contains-todo",
        "title": "line-contains-todo (FIX002)",
        "description": "Checks for \"TODO\" comments."
    },
    {
        "patternId": "FIX003_line-contains-xxx",
        "title": "line-contains-xxx (FIX003)",
        "description": "Checks for \"XXX\" comments."
    },
    {
        "patternId": "FIX004_line-contains-hack",
        "title": "line-contains-hack (FIX004)",
        "description": "Checks for \"HACK\" comments."
    },
    {
        "patternId": "FA100_future-rewritable-type-annotation",
        "title": "future-rewritable-type-annotation (FA100)",
        "description": "Checks for missing from __future__ import annotations imports upon\ndetecting type annotations that can be written more succinctly under\nPEP 563."
    },
    {
        "patternId": "FA102_future-required-type-annotation",
        "title": "future-required-type-annotation (FA102)",
        "description": "Checks for uses of PEP 585- and PEP 604-style type annotations in Python\nmodules that lack the required from __future__ import annotations import\nfor compatibility with older Python versions."
    },
    {
        "patternId": "INT001_f-string-in-get-text-func-call",
        "title": "f-string-in-get-text-func-call (INT001)",
        "description": "Checks for f-strings in gettext function calls."
    },
    {
        "patternId": "INT002_format-in-get-text-func-call",
        "title": "format-in-get-text-func-call (INT002)",
        "description": "Checks for str.format calls in gettext function calls."
    },
    {
        "patternId": "INT003_printf-in-get-text-func-call",
        "title": "printf-in-get-text-func-call (INT003)",
        "description": "Checks for printf-style formatted strings in gettext function calls."
    },
    {
        "patternId": "ISC001_single-line-implicit-string-concatenation",
        "title": "single-line-implicit-string-concatenation (ISC001)",
        "description": "Checks for implicitly concatenated strings on a single line."
    },
    {
        "patternId": "ISC002_multi-line-implicit-string-concatenation",
        "title": "multi-line-implicit-string-concatenation (ISC002)",
        "description": "Checks for implicitly concatenated strings that span multiple lines."
    },
    {
        "patternId": "ISC003_explicit-string-concatenation",
        "title": "explicit-string-concatenation (ISC003)",
        "description": "Checks for string literals that are explicitly concatenated (using the\n+ operator)."
    },
    {
        "patternId": "ICN001_unconventional-import-alias",
        "title": "unconventional-import-alias (ICN001)",
        "description": "Checks for imports that are typically imported using a common convention,\nlike import pandas as pd, and enforces that convention."
    },
    {
        "patternId": "ICN002_banned-import-alias",
        "title": "banned-import-alias (ICN002)",
        "description": "Checks for imports that use non-standard naming conventions, like\nimport tensorflow.keras.backend as K."
    },
    {
        "patternId": "ICN003_banned-import-from",
        "title": "banned-import-from (ICN003)",
        "description": "Checks for member imports that should instead be accessed by importing the\nmodule."
    },
    {
        "patternId": "LOG001_direct-logger-instantiation",
        "title": "direct-logger-instantiation (LOG001)",
        "description": "Checks for direct instantiation of logging.Logger, as opposed to using\nlogging.getLogger()."
    },
    {
        "patternId": "LOG002_invalid-get-logger-argument",
        "title": "invalid-get-logger-argument (LOG002)",
        "description": "Checks for any usage of __cached__ and __file__ as an argument to\nlogging.getLogger()."
    },
    {
        "patternId": "LOG007_exception-without-exc-info",
        "title": "exception-without-exc-info (LOG007)",
        "description": "Checks for uses of logging.exception() with exc_info set to False."
    },
    {
        "patternId": "LOG009_undocumented-warn",
        "title": "undocumented-warn (LOG009)",
        "description": "Checks for uses of logging.WARN."
    },
    {
        "patternId": "G001_logging-string-format",
        "title": "logging-string-format (G001)",
        "description": "Checks for uses of str.format to format logging messages."
    },
    {
        "patternId": "G002_logging-percent-format",
        "title": "logging-percent-format (G002)",
        "description": "Checks for uses of printf-style format strings to format logging\nmessages."
    },
    {
        "patternId": "G003_logging-string-concat",
        "title": "logging-string-concat (G003)",
        "description": "Checks for uses string concatenation via the + operator to format logging\nmessages."
    },
    {
        "patternId": "G004_logging-f-string",
        "title": "logging-f-string (G004)",
        "description": "Checks for uses of f-strings to format logging messages."
    },
    {
        "patternId": "G010_logging-warn",
        "title": "logging-warn (G010)",
        "description": "Checks for uses of logging.warn and logging.Logger.warn."
    },
    {
        "patternId": "G101_logging-extra-attr-clash",
        "title": "logging-extra-attr-clash (G101)",
        "description": "Checks for extra keywords in logging statements that clash with\nLogRecord attributes."
    },
    {
        "patternId": "G201_logging-exc-info",
        "title": "logging-exc-info (G201)",
        "description": "Checks for uses of logging.error that pass exc_info=True."
    },
    {
        "patternId": "G202_logging-redundant-exc-info",
        "title": "logging-redundant-exc-info (G202)",
        "description": "Checks for redundant exc_info keyword arguments in logging statements."
    },
    {
        "patternId": "INP001_implicit-namespace-package",
        "title": "implicit-namespace-package (INP001)",
        "description": "Checks for packages that are missing an __init__.py file."
    },
    {
        "patternId": "PIE790_unnecessary-placeholder",
        "title": "unnecessary-placeholder (PIE790)",
        "description": "Checks for unnecessary pass statements and ellipsis (...) literals in\nfunctions, classes, and other blocks."
    },
    {
        "patternId": "PIE794_duplicate-class-field-definition",
        "title": "duplicate-class-field-definition (PIE794)",
        "description": "Checks for duplicate field definitions in classes."
    },
    {
        "patternId": "PIE796_non-unique-enums",
        "title": "non-unique-enums (PIE796)",
        "description": "Checks for enums that contain duplicate values."
    },
    {
        "patternId": "PIE800_unnecessary-spread",
        "title": "unnecessary-spread (PIE800)",
        "description": "Checks for unnecessary dictionary unpacking operators (**)."
    },
    {
        "patternId": "PIE804_unnecessary-dict-kwargs",
        "title": "unnecessary-dict-kwargs (PIE804)",
        "description": "Checks for unnecessary dict kwargs."
    },
    {
        "patternId": "PIE807_reimplemented-container-builtin",
        "title": "reimplemented-container-builtin (PIE807)",
        "description": "Checks for lambdas that can be replaced with the list or dict builtins."
    },
    {
        "patternId": "PIE808_unnecessary-range-start",
        "title": "unnecessary-range-start (PIE808)",
        "description": "Checks for range calls with an unnecessary start argument."
    },
    {
        "patternId": "PIE810_multiple-starts-ends-with",
        "title": "multiple-starts-ends-with (PIE810)",
        "description": "Checks for startswith or endswith calls on the same value with\ndifferent prefixes or suffixes."
    },
    {
        "patternId": "T201_print",
        "title": "print (T201)",
        "description": "Checks for print statements."
    },
    {
        "patternId": "T203_p-print",
        "title": "p-print (T203)",
        "description": "Checks for pprint statements."
    },
    {
        "patternId": "PYI001_unprefixed-type-param",
        "title": "unprefixed-type-param (PYI001)",
        "description": "Checks that type TypeVars, ParamSpecs, and TypeVarTuples in stubs\nhave names prefixed with _."
    },
    {
        "patternId": "PYI002_complex-if-statement-in-stub",
        "title": "complex-if-statement-in-stub (PYI002)",
        "description": "Checks for if statements with complex conditionals in stubs."
    },
    {
        "patternId": "PYI003_unrecognized-version-info-check",
        "title": "unrecognized-version-info-check (PYI003)",
        "description": "Checks for problematic sys.version_info-related conditions in stubs."
    },
    {
        "patternId": "PYI004_patch-version-comparison",
        "title": "patch-version-comparison (PYI004)",
        "description": "Checks for Python version comparisons in stubs that compare against patch\nversions (e.g., Python 3.8.3) instead of major and minor versions (e.g.,\nPython 3.8)."
    },
    {
        "patternId": "PYI005_wrong-tuple-length-version-comparison",
        "title": "wrong-tuple-length-version-comparison (PYI005)",
        "description": "Checks for Python version comparisons that compare against a tuple of the\nwrong length."
    },
    {
        "patternId": "PYI006_bad-version-info-comparison",
        "title": "bad-version-info-comparison (PYI006)",
        "description": "Checks for uses of comparators other than < and >= for\nsys.version_info checks. All other comparators, such\nas >, <=, and ==, are banned."
    },
    {
        "patternId": "PYI007_unrecognized-platform-check",
        "title": "unrecognized-platform-check (PYI007)",
        "description": "Check for unrecognized sys.platform checks. Platform checks should be\nsimple string comparisons.\nNote: this rule is only enabled in .pyi stub files."
    },
    {
        "patternId": "PYI008_unrecognized-platform-name",
        "title": "unrecognized-platform-name (PYI008)",
        "description": "Check for unrecognized platform names in sys.platform checks.\nNote: this rule is only enabled in .pyi stub files."
    },
    {
        "patternId": "PYI009_pass-statement-stub-body",
        "title": "pass-statement-stub-body (PYI009)",
        "description": "Checks for pass statements in empty stub bodies."
    },
    {
        "patternId": "PYI010_non-empty-stub-body",
        "title": "non-empty-stub-body (PYI010)",
        "description": "Checks for non-empty function stub bodies."
    },
    {
        "patternId": "PYI011_typed-argument-default-in-stub",
        "title": "typed-argument-default-in-stub (PYI011)",
        "description": "Checks for typed function arguments in stubs with complex default values."
    },
    {
        "patternId": "PYI012_pass-in-class-body",
        "title": "pass-in-class-body (PYI012)",
        "description": "Checks for the presence of the pass statement in non-empty class bodies\nin .pyi files."
    },
    {
        "patternId": "PYI013_ellipsis-in-non-empty-class-body",
        "title": "ellipsis-in-non-empty-class-body (PYI013)",
        "description": "Removes ellipses (...) in otherwise non-empty class bodies."
    },
    {
        "patternId": "PYI014_argument-default-in-stub",
        "title": "argument-default-in-stub (PYI014)",
        "description": "Checks for untyped function arguments in stubs with default values that\nare not \"simple\" /// (i.e., int, float, complex, bytes, str,\nbool, None, ..., or simple container literals)."
    },
    {
        "patternId": "PYI015_assignment-default-in-stub",
        "title": "assignment-default-in-stub (PYI015)",
        "description": "Checks for assignments in stubs with default values that are not \"simple\"\n(i.e., int, float, complex, bytes, str, bool, None, ..., or\nsimple container literals)."
    },
    {
        "patternId": "PYI016_duplicate-union-member",
        "title": "duplicate-union-member (PYI016)",
        "description": "Checks for duplicate union members."
    },
    {
        "patternId": "PYI017_complex-assignment-in-stub",
        "title": "complex-assignment-in-stub (PYI017)",
        "description": "Checks for assignments with multiple or non-name targets in stub files."
    },
    {
        "patternId": "PYI018_unused-private-type-var",
        "title": "unused-private-type-var (PYI018)",
        "description": "Checks for the presence of unused private TypeVar, ParamSpec or\nTypeVarTuple declarations."
    },
    {
        "patternId": "PYI019_custom-type-var-for-self",
        "title": "custom-type-var-for-self (PYI019)",
        "description": "Checks for methods that use custom TypeVars in their\nannotations when they could use Self instead."
    },
    {
        "patternId": "PYI020_quoted-annotation-in-stub",
        "title": "quoted-annotation-in-stub (PYI020)",
        "description": "Checks for quoted type annotations in stub (.pyi) files, which should be avoided."
    },
    {
        "patternId": "PYI021_docstring-in-stub",
        "title": "docstring-in-stub (PYI021)",
        "description": "Checks for the presence of docstrings in stub files."
    },
    {
        "patternId": "PYI024_collections-named-tuple",
        "title": "collections-named-tuple (PYI024)",
        "description": "Checks for uses of collections.namedtuple in stub files."
    },
    {
        "patternId": "PYI025_unaliased-collections-abc-set-import",
        "title": "unaliased-collections-abc-set-import (PYI025)",
        "description": "Checks for from collections.abc import Set imports that do not alias\nSet to AbstractSet."
    },
    {
        "patternId": "PYI026_type-alias-without-annotation",
        "title": "type-alias-without-annotation (PYI026)",
        "description": "Checks for type alias definitions that are not annotated with\ntyping.TypeAlias."
    },
    {
        "patternId": "PYI029_str-or-repr-defined-in-stub",
        "title": "str-or-repr-defined-in-stub (PYI029)",
        "description": "Checks for redundant definitions of __str__ or __repr__ in stubs."
    },
    {
        "patternId": "PYI030_unnecessary-literal-union",
        "title": "unnecessary-literal-union (PYI030)",
        "description": "Checks for the presence of multiple literal types in a union."
    },
    {
        "patternId": "PYI032_any-eq-ne-annotation",
        "title": "any-eq-ne-annotation (PYI032)",
        "description": "Checks for __eq__ and __ne__ implementations that use typing.Any as\nthe type annotation for their second parameter."
    },
    {
        "patternId": "PYI033_type-comment-in-stub",
        "title": "type-comment-in-stub (PYI033)",
        "description": "Checks for the use of type comments (e.g., x = 1  # type: int) in stub\nfiles."
    },
    {
        "patternId": "PYI034_non-self-return-type",
        "title": "non-self-return-type (PYI034)",
        "description": "Checks for methods that are annotated with a fixed return type which\nshould instead be returning Self."
    },
    {
        "patternId": "PYI035_unassigned-special-variable-in-stub",
        "title": "unassigned-special-variable-in-stub (PYI035)",
        "description": "Checks that __all__, __match_args__, and __slots__ variables are\nassigned to values when defined in stub files."
    },
    {
        "patternId": "PYI036_bad-exit-annotation",
        "title": "bad-exit-annotation (PYI036)",
        "description": "Checks for incorrect function signatures on __exit__ and __aexit__\nmethods."
    },
    {
        "patternId": "PYI041_redundant-numeric-union",
        "title": "redundant-numeric-union (PYI041)",
        "description": "Checks for parameter annotations that contain redundant unions between\nbuiltin numeric types (e.g., int | float)."
    },
    {
        "patternId": "PYI042_snake-case-type-alias",
        "title": "snake-case-type-alias (PYI042)",
        "description": "Checks for type aliases that do not use the CamelCase naming convention."
    },
    {
        "patternId": "PYI043_t-suffixed-type-alias",
        "title": "t-suffixed-type-alias (PYI043)",
        "description": "Checks for private type alias definitions suffixed with 'T'."
    },
    {
        "patternId": "PYI044_future-annotations-in-stub",
        "title": "future-annotations-in-stub (PYI044)",
        "description": "Checks for the presence of the from __future__ import annotations import\nstatement in stub files."
    },
    {
        "patternId": "PYI045_iter-method-return-iterable",
        "title": "iter-method-return-iterable (PYI045)",
        "description": "Checks for __iter__ methods in stubs that return Iterable[T] instead\nof an Iterator[T]."
    },
    {
        "patternId": "PYI046_unused-private-protocol",
        "title": "unused-private-protocol (PYI046)",
        "description": "Checks for the presence of unused private typing.Protocol definitions."
    },
    {
        "patternId": "PYI047_unused-private-type-alias",
        "title": "unused-private-type-alias (PYI047)",
        "description": "Checks for the presence of unused private type aliases."
    },
    {
        "patternId": "PYI048_stub-body-multiple-statements",
        "title": "stub-body-multiple-statements (PYI048)",
        "description": "Checks for functions in stub (.pyi) files that contain multiple\nstatements."
    },
    {
        "patternId": "PYI049_unused-private-typed-dict",
        "title": "unused-private-typed-dict (PYI049)",
        "description": "Checks for the presence of unused private typing.TypedDict definitions."
    },
    {
        "patternId": "PYI050_no-return-argument-annotation-in-stub",
        "title": "no-return-argument-annotation-in-stub (PYI050)",
        "description": "Checks for uses of typing.NoReturn (and typing_extensions.NoReturn) for\nparameter annotations."
    },
    {
        "patternId": "PYI051_redundant-literal-union",
        "title": "redundant-literal-union (PYI051)",
        "description": "Checks for redundant unions between a Literal and a builtin supertype of\nthat Literal."
    },
    {
        "patternId": "PYI052_unannotated-assignment-in-stub",
        "title": "unannotated-assignment-in-stub (PYI052)",
        "description": "'What it does' section not found."
    },
    {
        "patternId": "PYI053_string-or-bytes-too-long",
        "title": "string-or-bytes-too-long (PYI053)",
        "description": "Checks for the use of string and bytes literals longer than 50 characters\nin stub (.pyi) files."
    },
    {
        "patternId": "PYI054_numeric-literal-too-long",
        "title": "numeric-literal-too-long (PYI054)",
        "description": "Checks for numeric literals with a string representation longer than ten\ncharacters."
    },
    {
        "patternId": "PYI055_unnecessary-type-union",
        "title": "unnecessary-type-union (PYI055)",
        "description": "Checks for the presence of multiple types in a union."
    },
    {
        "patternId": "PYI056_unsupported-method-call-on-all",
        "title": "unsupported-method-call-on-all (PYI056)",
        "description": "Checks that append, extend and remove methods are not called on\n__all__."
    },
    {
        "patternId": "PYI057_byte-string-usage",
        "title": "byte-string-usage (PYI057)",
        "description": "Checks for uses of typing.ByteString or collections.abc.ByteString."
    },
    {
        "patternId": "PYI058_generator-return-from-iter-method",
        "title": "generator-return-from-iter-method (PYI058)",
        "description": "Checks for simple __iter__ methods that return Generator, and for\nsimple __aiter__ methods that return AsyncGenerator."
    },
    {
        "patternId": "PYI062_duplicate-literal-member",
        "title": "duplicate-literal-member (PYI062)",
        "description": "Checks for duplicate members in a typing.Literal[] slice."
    },
    {
        "patternId": "PYI063_pep484-style-positional-only-parameter",
        "title": "pep484-style-positional-only-parameter (PYI063)",
        "description": "Checks for the presence of PEP 484-style positional-only parameters."
    },
    {
        "patternId": "PYI064_redundant-final-literal",
        "title": "redundant-final-literal (PYI064)",
        "description": "Checks for redundant Final[Literal[...]] annotations."
    },
    {
        "patternId": "PYI066_bad-version-info-order",
        "title": "bad-version-info-order (PYI066)",
        "description": "Checks for code that branches on sys.version_info comparisons where\nbranches corresponding to older Python versions come before branches\ncorresponding to newer Python versions."
    },
    {
        "patternId": "PT001_pytest-fixture-incorrect-parentheses-style",
        "title": "pytest-fixture-incorrect-parentheses-style (PT001)",
        "description": "Checks for argument-free @pytest.fixture() decorators with or without\nparentheses, depending on the lint.flake8-pytest-style.fixture-parentheses\nsetting."
    },
    {
        "patternId": "PT002_pytest-fixture-positional-args",
        "title": "pytest-fixture-positional-args (PT002)",
        "description": "Checks for pytest.fixture calls with positional arguments."
    },
    {
        "patternId": "PT003_pytest-extraneous-scope-function",
        "title": "pytest-extraneous-scope-function (PT003)",
        "description": "Checks for pytest.fixture calls with scope=\"function\"."
    },
    {
        "patternId": "PT006_pytest-parametrize-names-wrong-type",
        "title": "pytest-parametrize-names-wrong-type (PT006)",
        "description": "Checks for the type of parameter names passed to pytest.mark.parametrize."
    },
    {
        "patternId": "PT007_pytest-parametrize-values-wrong-type",
        "title": "pytest-parametrize-values-wrong-type (PT007)",
        "description": "Checks for the type of parameter values passed to pytest.mark.parametrize."
    },
    {
        "patternId": "PT008_pytest-patch-with-lambda",
        "title": "pytest-patch-with-lambda (PT008)",
        "description": "Checks for mocked calls that use a dummy lambda function instead of\nreturn_value."
    },
    {
        "patternId": "PT009_pytest-unittest-assertion",
        "title": "pytest-unittest-assertion (PT009)",
        "description": "Checks for uses of assertion methods from the unittest module."
    },
    {
        "patternId": "PT010_pytest-raises-without-exception",
        "title": "pytest-raises-without-exception (PT010)",
        "description": "Checks for pytest.raises calls without an expected exception."
    },
    {
        "patternId": "PT011_pytest-raises-too-broad",
        "title": "pytest-raises-too-broad (PT011)",
        "description": "Checks for pytest.raises calls without a match parameter."
    },
    {
        "patternId": "PT012_pytest-raises-with-multiple-statements",
        "title": "pytest-raises-with-multiple-statements (PT012)",
        "description": "Checks for pytest.raises context managers with multiple statements."
    },
    {
        "patternId": "PT013_pytest-incorrect-pytest-import",
        "title": "pytest-incorrect-pytest-import (PT013)",
        "description": "Checks for incorrect import of pytest."
    },
    {
        "patternId": "PT014_pytest-duplicate-parametrize-test-cases",
        "title": "pytest-duplicate-parametrize-test-cases (PT014)",
        "description": "Checks for duplicate test cases in pytest.mark.parametrize."
    },
    {
        "patternId": "PT015_pytest-assert-always-false",
        "title": "pytest-assert-always-false (PT015)",
        "description": "Checks for assert statements whose test expression is a falsy value."
    },
    {
        "patternId": "PT016_pytest-fail-without-message",
        "title": "pytest-fail-without-message (PT016)",
        "description": "Checks for pytest.fail calls without a message."
    },
    {
        "patternId": "PT017_pytest-assert-in-except",
        "title": "pytest-assert-in-except (PT017)",
        "description": "Checks for assert statements in except clauses."
    },
    {
        "patternId": "PT018_pytest-composite-assertion",
        "title": "pytest-composite-assertion (PT018)",
        "description": "Checks for assertions that combine multiple independent conditions."
    },
    {
        "patternId": "PT019_pytest-fixture-param-without-value",
        "title": "pytest-fixture-param-without-value (PT019)",
        "description": "Checks for pytest test functions that should be decorated with\n@pytest.mark.usefixtures."
    },
    {
        "patternId": "PT020_pytest-deprecated-yield-fixture",
        "title": "pytest-deprecated-yield-fixture (PT020)",
        "description": "Checks for pytest.yield_fixture usage."
    },
    {
        "patternId": "PT021_pytest-fixture-finalizer-callback",
        "title": "pytest-fixture-finalizer-callback (PT021)",
        "description": "Checks for unnecessary request.addfinalizer usages in pytest fixtures."
    },
    {
        "patternId": "PT022_pytest-useless-yield-fixture",
        "title": "pytest-useless-yield-fixture (PT022)",
        "description": "Checks for unnecessary yield expressions in pytest fixtures."
    },
    {
        "patternId": "PT023_pytest-incorrect-mark-parentheses-style",
        "title": "pytest-incorrect-mark-parentheses-style (PT023)",
        "description": "Checks for argument-free @pytest.mark.<marker>() decorators with or\nwithout parentheses, depending on the lint.flake8-pytest-style.mark-parentheses\nsetting.\nThe rule defaults to removing unnecessary parentheses,\nto match the documentation of the official pytest projects."
    },
    {
        "patternId": "PT024_pytest-unnecessary-asyncio-mark-on-fixture",
        "title": "pytest-unnecessary-asyncio-mark-on-fixture (PT024)",
        "description": "Checks for unnecessary @pytest.mark.asyncio decorators applied to fixtures."
    },
    {
        "patternId": "PT025_pytest-erroneous-use-fixtures-on-fixture",
        "title": "pytest-erroneous-use-fixtures-on-fixture (PT025)",
        "description": "Checks for pytest.mark.usefixtures decorators applied to pytest\nfixtures."
    },
    {
        "patternId": "PT026_pytest-use-fixtures-without-parameters",
        "title": "pytest-use-fixtures-without-parameters (PT026)",
        "description": "Checks for @pytest.mark.usefixtures() decorators that aren't passed any\narguments."
    },
    {
        "patternId": "PT027_pytest-unittest-raises-assertion",
        "title": "pytest-unittest-raises-assertion (PT027)",
        "description": "Checks for uses of exception-related assertion methods from the unittest\nmodule."
    },
    {
        "patternId": "Q000_bad-quotes-inline-string",
        "title": "bad-quotes-inline-string (Q000)",
        "description": "Checks for inline strings that use single quotes or double quotes,\ndepending on the value of the lint.flake8-quotes.inline-quotes option."
    },
    {
        "patternId": "Q001_bad-quotes-multiline-string",
        "title": "bad-quotes-multiline-string (Q001)",
        "description": "Checks for multiline strings that use single quotes or double quotes,\ndepending on the value of the lint.flake8-quotes.multiline-quotes\nsetting."
    },
    {
        "patternId": "Q002_bad-quotes-docstring",
        "title": "bad-quotes-docstring (Q002)",
        "description": "Checks for docstrings that use single quotes or double quotes, depending\non the value of the lint.flake8-quotes.docstring-quotes setting."
    },
    {
        "patternId": "Q003_avoidable-escaped-quote",
        "title": "avoidable-escaped-quote (Q003)",
        "description": "Checks for strings that include escaped quotes, and suggests changing\nthe quote style to avoid the need to escape them."
    },
    {
        "patternId": "Q004_unnecessary-escaped-quote",
        "title": "unnecessary-escaped-quote (Q004)",
        "description": "Checks for strings that include unnecessarily escaped quotes."
    },
    {
        "patternId": "RSE102_unnecessary-paren-on-raise-exception",
        "title": "unnecessary-paren-on-raise-exception (RSE102)",
        "description": "Checks for unnecessary parentheses on raised exceptions."
    },
    {
        "patternId": "RET501_unnecessary-return-none",
        "title": "unnecessary-return-none (RET501)",
        "description": "Checks for the presence of a return None statement when None is the only\npossible return value."
    },
    {
        "patternId": "RET502_implicit-return-value",
        "title": "implicit-return-value (RET502)",
        "description": "Checks for the presence of a return statement with no explicit value,\nfor functions that return non-None values elsewhere."
    },
    {
        "patternId": "RET503_implicit-return",
        "title": "implicit-return (RET503)",
        "description": "Checks for missing explicit return statements at the end of functions\nthat can return non-None values."
    },
    {
        "patternId": "RET504_unnecessary-assign",
        "title": "unnecessary-assign (RET504)",
        "description": "Checks for variable assignments that immediately precede a return of the\nassigned variable."
    },
    {
        "patternId": "RET505_superfluous-else-return",
        "title": "superfluous-else-return (RET505)",
        "description": "Checks for else statements with a return statement in the preceding\nif block."
    },
    {
        "patternId": "RET506_superfluous-else-raise",
        "title": "superfluous-else-raise (RET506)",
        "description": "Checks for else statements with a raise statement in the preceding if\nblock."
    },
    {
        "patternId": "RET507_superfluous-else-continue",
        "title": "superfluous-else-continue (RET507)",
        "description": "Checks for else statements with a continue statement in the preceding\nif block."
    },
    {
        "patternId": "RET508_superfluous-else-break",
        "title": "superfluous-else-break (RET508)",
        "description": "Checks for else statements with a break statement in the preceding if\nblock."
    },
    {
        "patternId": "SLF001_private-member-access",
        "title": "private-member-access (SLF001)",
        "description": "Checks for accesses on \"private\" class members."
    },
    {
        "patternId": "SIM101_duplicate-isinstance-call",
        "title": "duplicate-isinstance-call (SIM101)",
        "description": "Checks for multiple isinstance calls on the same target."
    },
    {
        "patternId": "SIM102_collapsible-if",
        "title": "collapsible-if (SIM102)",
        "description": "Checks for nested if statements that can be collapsed into a single if\nstatement."
    },
    {
        "patternId": "SIM103_needless-bool",
        "title": "needless-bool (SIM103)",
        "description": "Checks for if statements that can be replaced with bool."
    },
    {
        "patternId": "SIM105_suppressible-exception",
        "title": "suppressible-exception (SIM105)",
        "description": "Checks for try-except-pass blocks that can be replaced with the\ncontextlib.suppress context manager."
    },
    {
        "patternId": "SIM107_return-in-try-except-finally",
        "title": "return-in-try-except-finally (SIM107)",
        "description": "Checks for return statements in try-except and finally blocks."
    },
    {
        "patternId": "SIM108_if-else-block-instead-of-if-exp",
        "title": "if-else-block-instead-of-if-exp (SIM108)",
        "description": "Check for if-else-blocks that can be replaced with a ternary operator.\nMoreover, in preview, check if these ternary expressions can be\nfurther simplified to binary expressions."
    },
    {
        "patternId": "SIM109_compare-with-tuple",
        "title": "compare-with-tuple (SIM109)",
        "description": "Checks for boolean expressions that contain multiple equality comparisons\nto the same value."
    },
    {
        "patternId": "SIM110_reimplemented-builtin",
        "title": "reimplemented-builtin (SIM110)",
        "description": "Checks for for loops that can be replaced with a builtin function, like\nany or all."
    },
    {
        "patternId": "SIM112_uncapitalized-environment-variables",
        "title": "uncapitalized-environment-variables (SIM112)",
        "description": "Check for environment variables that are not capitalized."
    },
    {
        "patternId": "SIM113_enumerate-for-loop",
        "title": "enumerate-for-loop (SIM113)",
        "description": "Checks for for loops with explicit loop-index variables that can be replaced\nwith enumerate()."
    },
    {
        "patternId": "SIM114_if-with-same-arms",
        "title": "if-with-same-arms (SIM114)",
        "description": "Checks for if branches with identical arm bodies."
    },
    {
        "patternId": "SIM115_open-file-with-context-handler",
        "title": "open-file-with-context-handler (SIM115)",
        "description": "Checks for cases where files are opened (e.g., using the builtin open() function)\nwithout using a context manager."
    },
    {
        "patternId": "SIM116_if-else-block-instead-of-dict-lookup",
        "title": "if-else-block-instead-of-dict-lookup (SIM116)",
        "description": "Checks for three or more consecutive if-statements with direct returns"
    },
    {
        "patternId": "SIM117_multiple-with-statements",
        "title": "multiple-with-statements (SIM117)",
        "description": "Checks for the unnecessary nesting of multiple consecutive context\nmanagers."
    },
    {
        "patternId": "SIM118_in-dict-keys",
        "title": "in-dict-keys (SIM118)",
        "description": "Checks for key-existence checks against dict.keys() calls."
    },
    {
        "patternId": "SIM201_negate-equal-op",
        "title": "negate-equal-op (SIM201)",
        "description": "Checks for negated == operators."
    },
    {
        "patternId": "SIM202_negate-not-equal-op",
        "title": "negate-not-equal-op (SIM202)",
        "description": "Checks for negated != operators."
    },
    {
        "patternId": "SIM208_double-negation",
        "title": "double-negation (SIM208)",
        "description": "Checks for double negations (i.e., multiple not operators)."
    },
    {
        "patternId": "SIM210_if-expr-with-true-false",
        "title": "if-expr-with-true-false (SIM210)",
        "description": "Checks for if expressions that can be replaced with bool() calls."
    },
    {
        "patternId": "SIM211_if-expr-with-false-true",
        "title": "if-expr-with-false-true (SIM211)",
        "description": "Checks for if expressions that can be replaced by negating a given\ncondition."
    },
    {
        "patternId": "SIM212_if-expr-with-twisted-arms",
        "title": "if-expr-with-twisted-arms (SIM212)",
        "description": "Checks for if expressions that check against a negated condition."
    },
    {
        "patternId": "SIM220_expr-and-not-expr",
        "title": "expr-and-not-expr (SIM220)",
        "description": "Checks for and expressions that include both an expression and its\nnegation."
    },
    {
        "patternId": "SIM221_expr-or-not-expr",
        "title": "expr-or-not-expr (SIM221)",
        "description": "Checks for or expressions that include both an expression and its\nnegation."
    },
    {
        "patternId": "SIM222_expr-or-true",
        "title": "expr-or-true (SIM222)",
        "description": "Checks for or expressions that contain truthy values."
    },
    {
        "patternId": "SIM223_expr-and-false",
        "title": "expr-and-false (SIM223)",
        "description": "Checks for and expressions that contain falsey values."
    },
    {
        "patternId": "SIM300_yoda-conditions",
        "title": "yoda-conditions (SIM300)",
        "description": "Checks for conditions that position a constant on the left-hand side of the\ncomparison operator, rather than the right-hand side."
    },
    {
        "patternId": "SIM401_if-else-block-instead-of-dict-get",
        "title": "if-else-block-instead-of-dict-get (SIM401)",
        "description": "Checks for if statements that can be replaced with dict.get calls."
    },
    {
        "patternId": "SIM910_dict-get-with-none-default",
        "title": "dict-get-with-none-default (SIM910)",
        "description": "Checks for dict.get() calls that pass None as the default value."
    },
    {
        "patternId": "SIM911_zip-dict-keys-and-values",
        "title": "zip-dict-keys-and-values (SIM911)",
        "description": "Checks for use of zip() to iterate over keys and values of a dictionary at once."
    },
    {
        "patternId": "SLOT000_no-slots-in-str-subclass",
        "title": "no-slots-in-str-subclass (SLOT000)",
        "description": "Checks for subclasses of str that lack a __slots__ definition."
    },
    {
        "patternId": "SLOT001_no-slots-in-tuple-subclass",
        "title": "no-slots-in-tuple-subclass (SLOT001)",
        "description": "Checks for subclasses of tuple that lack a __slots__ definition."
    },
    {
        "patternId": "SLOT002_no-slots-in-namedtuple-subclass",
        "title": "no-slots-in-namedtuple-subclass (SLOT002)",
        "description": "Checks for subclasses of collections.namedtuple or typing.NamedTuple\nthat lack a __slots__ definition."
    },
    {
        "patternId": "TID251_banned-api",
        "title": "banned-api (TID251)",
        "description": "Checks for banned imports."
    },
    {
        "patternId": "TID252_relative-imports",
        "title": "relative-imports (TID252)",
        "description": "Checks for relative imports."
    },
    {
        "patternId": "TID253_banned-module-level-imports",
        "title": "banned-module-level-imports (TID253)",
        "description": "Checks for module-level imports that should instead be imported lazily\n(e.g., within a function definition, or an if TYPE_CHECKING: block, or\nsome other nested context)."
    },
    {
        "patternId": "TD001_invalid-todo-tag",
        "title": "invalid-todo-tag (TD001)",
        "description": "Checks that a TODO comment is labelled with \"TODO\"."
    },
    {
        "patternId": "TD002_missing-todo-author",
        "title": "missing-todo-author (TD002)",
        "description": "Checks that a TODO comment includes an author."
    },
    {
        "patternId": "TD003_missing-todo-link",
        "title": "missing-todo-link (TD003)",
        "description": "Checks that a TODO comment is associated with a link to a relevant issue\nor ticket."
    },
    {
        "patternId": "TD004_missing-todo-colon",
        "title": "missing-todo-colon (TD004)",
        "description": "Checks that a \"TODO\" tag is followed by a colon."
    },
    {
        "patternId": "TD005_missing-todo-description",
        "title": "missing-todo-description (TD005)",
        "description": "Checks that a \"TODO\" tag contains a description of the issue following the\ntag itself."
    },
    {
        "patternId": "TD006_invalid-todo-capitalization",
        "title": "invalid-todo-capitalization (TD006)",
        "description": "Checks that a \"TODO\" tag is properly capitalized (i.e., that the tag is\nuppercase)."
    },
    {
        "patternId": "TD007_missing-space-after-todo-colon",
        "title": "missing-space-after-todo-colon (TD007)",
        "description": "Checks that the colon after a \"TODO\" tag is followed by a space."
    },
    {
        "patternId": "TC001_typing-only-first-party-import",
        "title": "typing-only-first-party-import (TC001)",
        "description": "Checks for first-party imports that are only used for type annotations, but\naren't defined in a type-checking block."
    },
    {
        "patternId": "TC002_typing-only-third-party-import",
        "title": "typing-only-third-party-import (TC002)",
        "description": "Checks for third-party imports that are only used for type annotations, but\naren't defined in a type-checking block."
    },
    {
        "patternId": "TC003_typing-only-standard-library-import",
        "title": "typing-only-standard-library-import (TC003)",
        "description": "Checks for standard library imports that are only used for type\nannotations, but aren't defined in a type-checking block."
    },
    {
        "patternId": "TC004_runtime-import-in-type-checking-block",
        "title": "runtime-import-in-type-checking-block (TC004)",
        "description": "Checks for imports that are required at runtime but are only defined in\ntype-checking blocks."
    },
    {
        "patternId": "TC005_empty-type-checking-block",
        "title": "empty-type-checking-block (TC005)",
        "description": "Checks for an empty type-checking block."
    },
    {
        "patternId": "TC010_runtime-string-union",
        "title": "runtime-string-union (TC010)",
        "description": "Checks for the presence of string literals in X | Y-style union types."
    },
    {
        "patternId": "ARG001_unused-function-argument",
        "title": "unused-function-argument (ARG001)",
        "description": "Checks for the presence of unused arguments in function definitions."
    },
    {
        "patternId": "ARG002_unused-method-argument",
        "title": "unused-method-argument (ARG002)",
        "description": "Checks for the presence of unused arguments in instance method definitions."
    },
    {
        "patternId": "ARG003_unused-class-method-argument",
        "title": "unused-class-method-argument (ARG003)",
        "description": "Checks for the presence of unused arguments in class method definitions."
    },
    {
        "patternId": "ARG004_unused-static-method-argument",
        "title": "unused-static-method-argument (ARG004)",
        "description": "Checks for the presence of unused arguments in static method definitions."
    },
    {
        "patternId": "ARG005_unused-lambda-argument",
        "title": "unused-lambda-argument (ARG005)",
        "description": "Checks for the presence of unused arguments in lambda expression\ndefinitions."
    },
    {
        "patternId": "PTH100_os-path-abspath",
        "title": "os-path-abspath (PTH100)",
        "description": "Checks for uses of os.path.abspath."
    },
    {
        "patternId": "PTH101_os-chmod",
        "title": "os-chmod (PTH101)",
        "description": "Checks for uses of os.chmod."
    },
    {
        "patternId": "PTH102_os-mkdir",
        "title": "os-mkdir (PTH102)",
        "description": "Checks for uses of os.mkdir."
    },
    {
        "patternId": "PTH103_os-makedirs",
        "title": "os-makedirs (PTH103)",
        "description": "Checks for uses of os.makedirs."
    },
    {
        "patternId": "PTH104_os-rename",
        "title": "os-rename (PTH104)",
        "description": "Checks for uses of os.rename."
    },
    {
        "patternId": "PTH105_os-replace",
        "title": "os-replace (PTH105)",
        "description": "Checks for uses of os.replace."
    },
    {
        "patternId": "PTH106_os-rmdir",
        "title": "os-rmdir (PTH106)",
        "description": "Checks for uses of os.rmdir."
    },
    {
        "patternId": "PTH107_os-remove",
        "title": "os-remove (PTH107)",
        "description": "Checks for uses of os.remove."
    },
    {
        "patternId": "PTH108_os-unlink",
        "title": "os-unlink (PTH108)",
        "description": "Checks for uses of os.unlink."
    },
    {
        "patternId": "PTH109_os-getcwd",
        "title": "os-getcwd (PTH109)",
        "description": "Checks for uses of os.getcwd and os.getcwdb."
    },
    {
        "patternId": "PTH110_os-path-exists",
        "title": "os-path-exists (PTH110)",
        "description": "Checks for uses of os.path.exists."
    },
    {
        "patternId": "PTH111_os-path-expanduser",
        "title": "os-path-expanduser (PTH111)",
        "description": "Checks for uses of os.path.expanduser."
    },
    {
        "patternId": "PTH112_os-path-isdir",
        "title": "os-path-isdir (PTH112)",
        "description": "Checks for uses of os.path.isdir."
    },
    {
        "patternId": "PTH113_os-path-isfile",
        "title": "os-path-isfile (PTH113)",
        "description": "Checks for uses of os.path.isfile."
    },
    {
        "patternId": "PTH114_os-path-islink",
        "title": "os-path-islink (PTH114)",
        "description": "Checks for uses of os.path.islink."
    },
    {
        "patternId": "PTH115_os-readlink",
        "title": "os-readlink (PTH115)",
        "description": "Checks for uses of os.readlink."
    },
    {
        "patternId": "PTH116_os-stat",
        "title": "os-stat (PTH116)",
        "description": "Checks for uses of os.stat."
    },
    {
        "patternId": "PTH117_os-path-isabs",
        "title": "os-path-isabs (PTH117)",
        "description": "Checks for uses of os.path.isabs."
    },
    {
        "patternId": "PTH118_os-path-join",
        "title": "os-path-join (PTH118)",
        "description": "Checks for uses of os.path.join."
    },
    {
        "patternId": "PTH119_os-path-basename",
        "title": "os-path-basename (PTH119)",
        "description": "Checks for uses of os.path.basename."
    },
    {
        "patternId": "PTH120_os-path-dirname",
        "title": "os-path-dirname (PTH120)",
        "description": "Checks for uses of os.path.dirname."
    },
    {
        "patternId": "PTH121_os-path-samefile",
        "title": "os-path-samefile (PTH121)",
        "description": "Checks for uses of os.path.samefile."
    },
    {
        "patternId": "PTH122_os-path-splitext",
        "title": "os-path-splitext (PTH122)",
        "description": "Checks for uses of os.path.splitext."
    },
    {
        "patternId": "PTH123_builtin-open",
        "title": "builtin-open (PTH123)",
        "description": "Checks for uses of the open() builtin."
    },
    {
        "patternId": "PTH124_py-path",
        "title": "py-path (PTH124)",
        "description": "Checks for uses of the py.path library."
    },
    {
        "patternId": "PTH201_path-constructor-current-directory",
        "title": "path-constructor-current-directory (PTH201)",
        "description": "Checks for pathlib.Path objects that are initialized with the current\ndirectory."
    },
    {
        "patternId": "PTH202_os-path-getsize",
        "title": "os-path-getsize (PTH202)",
        "description": "Checks for uses of os.path.getsize."
    },
    {
        "patternId": "PTH203_os-path-getatime",
        "title": "os-path-getatime (PTH203)",
        "description": "Checks for uses of os.path.getatime."
    },
    {
        "patternId": "PTH204_os-path-getmtime",
        "title": "os-path-getmtime (PTH204)",
        "description": "Checks for uses of os.path.getmtime."
    },
    {
        "patternId": "PTH205_os-path-getctime",
        "title": "os-path-getctime (PTH205)",
        "description": "Checks for uses of os.path.getctime."
    },
    {
        "patternId": "PTH206_os-sep-split",
        "title": "os-sep-split (PTH206)",
        "description": "Checks for uses of .split(os.sep)"
    },
    {
        "patternId": "PTH207_glob",
        "title": "glob (PTH207)",
        "description": "Checks for the use of glob.glob() and glob.iglob()."
    },
    {
        "patternId": "FLY002_static-join-to-f-string",
        "title": "static-join-to-f-string (FLY002)",
        "description": "Checks for str.join calls that can be replaced with f-strings."
    },
    {
        "patternId": "I001_unsorted-imports",
        "title": "unsorted-imports (I001)",
        "description": "De-duplicates, groups, and sorts imports based on the provided isort settings."
    },
    {
        "patternId": "I002_missing-required-import",
        "title": "missing-required-import (I002)",
        "description": "Adds any required imports, as specified by the user, to the top of the\nfile."
    },
    {
        "patternId": "C901_complex-structure",
        "title": "complex-structure (C901)",
        "description": "Checks for functions with a high McCabe complexity."
    },
    {
        "patternId": "NPY001_numpy-deprecated-type-alias",
        "title": "numpy-deprecated-type-alias (NPY001)",
        "description": "Checks for deprecated NumPy type aliases."
    },
    {
        "patternId": "NPY002_numpy-legacy-random",
        "title": "numpy-legacy-random (NPY002)",
        "description": "Checks for the use of legacy np.random function calls."
    },
    {
        "patternId": "NPY003_numpy-deprecated-function",
        "title": "numpy-deprecated-function (NPY003)",
        "description": "Checks for uses of deprecated NumPy functions."
    },
    {
        "patternId": "NPY201_numpy2-deprecation",
        "title": "numpy2-deprecation (NPY201)",
        "description": "Checks for uses of NumPy functions and constants that were removed from\nthe main namespace in NumPy 2.0."
    },
    {
        "patternId": "PD002_pandas-use-of-inplace-argument",
        "title": "pandas-use-of-inplace-argument (PD002)",
        "description": "Checks for inplace=True usages in pandas function and method\ncalls."
    },
    {
        "patternId": "PD003_pandas-use-of-dot-is-null",
        "title": "pandas-use-of-dot-is-null (PD003)",
        "description": "Checks for uses of .isnull on Pandas objects."
    },
    {
        "patternId": "PD004_pandas-use-of-dot-not-null",
        "title": "pandas-use-of-dot-not-null (PD004)",
        "description": "Checks for uses of .notnull on Pandas objects."
    },
    {
        "patternId": "PD007_pandas-use-of-dot-ix",
        "title": "pandas-use-of-dot-ix (PD007)",
        "description": "Checks for uses of .ix on Pandas objects."
    },
    {
        "patternId": "PD008_pandas-use-of-dot-at",
        "title": "pandas-use-of-dot-at (PD008)",
        "description": "Checks for uses of .at on Pandas objects."
    },
    {
        "patternId": "PD009_pandas-use-of-dot-iat",
        "title": "pandas-use-of-dot-iat (PD009)",
        "description": "Checks for uses of .iat on Pandas objects."
    },
    {
        "patternId": "PD010_pandas-use-of-dot-pivot-or-unstack",
        "title": "pandas-use-of-dot-pivot-or-unstack (PD010)",
        "description": "Checks for uses of .pivot or .unstack on Pandas objects."
    },
    {
        "patternId": "PD011_pandas-use-of-dot-values",
        "title": "pandas-use-of-dot-values (PD011)",
        "description": "Checks for uses of .values on Pandas Series and Index objects."
    },
    {
        "patternId": "PD012_pandas-use-of-dot-read-table",
        "title": "pandas-use-of-dot-read-table (PD012)",
        "description": "Checks for uses of pd.read_table to read CSV files."
    },
    {
        "patternId": "PD013_pandas-use-of-dot-stack",
        "title": "pandas-use-of-dot-stack (PD013)",
        "description": "Checks for uses of .stack on Pandas objects."
    },
    {
        "patternId": "PD015_pandas-use-of-pd-merge",
        "title": "pandas-use-of-pd-merge (PD015)",
        "description": "Checks for uses of pd.merge on Pandas objects."
    },
    {
        "patternId": "PD101_pandas-nunique-constant-series-check",
        "title": "pandas-nunique-constant-series-check (PD101)",
        "description": "Check for uses of .nunique() to check if a Pandas Series is constant\n(i.e., contains only one unique value)."
    },
    {
        "patternId": "PD901_pandas-df-variable-name",
        "title": "pandas-df-variable-name (PD901)",
        "description": "Checks for assignments to the variable df."
    },
    {
        "patternId": "N801_invalid-class-name",
        "title": "invalid-class-name (N801)",
        "description": "Checks for class names that do not follow the CamelCase convention."
    },
    {
        "patternId": "N802_invalid-function-name",
        "title": "invalid-function-name (N802)",
        "description": "Checks for functions names that do not follow the snake_case naming\nconvention."
    },
    {
        "patternId": "N803_invalid-argument-name",
        "title": "invalid-argument-name (N803)",
        "description": "Checks for argument names that do not follow the snake_case convention."
    },
    {
        "patternId": "N804_invalid-first-argument-name-for-class-method",
        "title": "invalid-first-argument-name-for-class-method (N804)",
        "description": "Checks for class methods that use a name other than cls for their\nfirst argument.\nWith preview enabled, the method __new__ is exempted from this\ncheck and the corresponding violation is then caught by\nbad-staticmethod-argument."
    },
    {
        "patternId": "N805_invalid-first-argument-name-for-method",
        "title": "invalid-first-argument-name-for-method (N805)",
        "description": "Checks for instance methods that use a name other than self for their\nfirst argument."
    },
    {
        "patternId": "N806_non-lowercase-variable-in-function",
        "title": "non-lowercase-variable-in-function (N806)",
        "description": "Checks for the use of non-lowercase variable names in functions."
    },
    {
        "patternId": "N807_dunder-function-name",
        "title": "dunder-function-name (N807)",
        "description": "Checks for functions with \"dunder\" names (that is, names with two\nleading and trailing underscores) that are not documented."
    },
    {
        "patternId": "N811_constant-imported-as-non-constant",
        "title": "constant-imported-as-non-constant (N811)",
        "description": "Checks for constant imports that are aliased to non-constant-style\nnames."
    },
    {
        "patternId": "N812_lowercase-imported-as-non-lowercase",
        "title": "lowercase-imported-as-non-lowercase (N812)",
        "description": "Checks for lowercase imports that are aliased to non-lowercase names."
    },
    {
        "patternId": "N813_camelcase-imported-as-lowercase",
        "title": "camelcase-imported-as-lowercase (N813)",
        "description": "Checks for CamelCase imports that are aliased to lowercase names."
    },
    {
        "patternId": "N814_camelcase-imported-as-constant",
        "title": "camelcase-imported-as-constant (N814)",
        "description": "Checks for CamelCase imports that are aliased to constant-style names."
    },
    {
        "patternId": "N815_mixed-case-variable-in-class-scope",
        "title": "mixed-case-variable-in-class-scope (N815)",
        "description": "Checks for class variable names that follow the mixedCase convention."
    },
    {
        "patternId": "N816_mixed-case-variable-in-global-scope",
        "title": "mixed-case-variable-in-global-scope (N816)",
        "description": "Checks for global variable names that follow the mixedCase convention."
    },
    {
        "patternId": "N817_camelcase-imported-as-acronym",
        "title": "camelcase-imported-as-acronym (N817)",
        "description": "Checks for CamelCase imports that are aliased as acronyms."
    },
    {
        "patternId": "N818_error-suffix-on-exception-name",
        "title": "error-suffix-on-exception-name (N818)",
        "description": "Checks for custom exception definitions that omit the Error suffix."
    },
    {
        "patternId": "N999_invalid-module-name",
        "title": "invalid-module-name (N999)",
        "description": "Checks for module names that do not follow the snake_case naming\nconvention or are otherwise invalid."
    },
    {
        "patternId": "PERF101_unnecessary-list-cast",
        "title": "unnecessary-list-cast (PERF101)",
        "description": "Checks for explicit casts to list on for-loop iterables."
    },
    {
        "patternId": "PERF102_incorrect-dict-iterator",
        "title": "incorrect-dict-iterator (PERF102)",
        "description": "Checks for uses of dict.items() that discard either the key or the value\nwhen iterating over the dictionary."
    },
    {
        "patternId": "PERF203_try-except-in-loop",
        "title": "try-except-in-loop (PERF203)",
        "description": "Checks for uses of except handling via try-except within for and\nwhile loops."
    },
    {
        "patternId": "PERF401_manual-list-comprehension",
        "title": "manual-list-comprehension (PERF401)",
        "description": "Checks for for loops that can be replaced by a list comprehension."
    },
    {
        "patternId": "PERF402_manual-list-copy",
        "title": "manual-list-copy (PERF402)",
        "description": "Checks for for loops that can be replaced by a making a copy of a list."
    },
    {
        "patternId": "PERF403_manual-dict-comprehension",
        "title": "manual-dict-comprehension (PERF403)",
        "description": "Checks for for loops that can be replaced by a dictionary comprehension."
    },
    {
        "patternId": "E101_mixed-spaces-and-tabs",
        "title": "mixed-spaces-and-tabs (E101)",
        "description": "Checks for mixed tabs and spaces in indentation."
    },
    {
        "patternId": "E401_multiple-imports-on-one-line",
        "title": "multiple-imports-on-one-line (E401)",
        "description": "Check for multiple imports on one line."
    },
    {
        "patternId": "E402_module-import-not-at-top-of-file",
        "title": "module-import-not-at-top-of-file (E402)",
        "description": "Checks for imports that are not at the top of the file."
    },
    {
        "patternId": "E501_line-too-long",
        "title": "line-too-long (E501)",
        "description": "Checks for lines that exceed the specified maximum character length."
    },
    {
        "patternId": "E701_multiple-statements-on-one-line-colon",
        "title": "multiple-statements-on-one-line-colon (E701)",
        "description": "Checks for compound statements (multiple statements on the same line)."
    },
    {
        "patternId": "E702_multiple-statements-on-one-line-semicolon",
        "title": "multiple-statements-on-one-line-semicolon (E702)",
        "description": "Checks for multiline statements on one line."
    },
    {
        "patternId": "E703_useless-semicolon",
        "title": "useless-semicolon (E703)",
        "description": "Checks for statements that end with an unnecessary semicolon."
    },
    {
        "patternId": "E711_none-comparison",
        "title": "none-comparison (E711)",
        "description": "Checks for comparisons to None which are not using the is operator."
    },
    {
        "patternId": "E712_true-false-comparison",
        "title": "true-false-comparison (E712)",
        "description": "Checks for equality comparisons to boolean literals."
    },
    {
        "patternId": "E713_not-in-test",
        "title": "not-in-test (E713)",
        "description": "Checks for membership tests using not {element} in {collection}."
    },
    {
        "patternId": "E714_not-is-test",
        "title": "not-is-test (E714)",
        "description": "Checks for identity comparisons using not {foo} is {bar}."
    },
    {
        "patternId": "E721_type-comparison",
        "title": "type-comparison (E721)",
        "description": "Checks for object type comparisons using == and other comparison\noperators."
    },
    {
        "patternId": "E722_bare-except",
        "title": "bare-except (E722)",
        "description": "Checks for bare except catches in try-except statements."
    },
    {
        "patternId": "E731_lambda-assignment",
        "title": "lambda-assignment (E731)",
        "description": "Checks for lambda expressions which are assigned to a variable."
    },
    {
        "patternId": "E741_ambiguous-variable-name",
        "title": "ambiguous-variable-name (E741)",
        "description": "Checks for the use of the characters 'l', 'O', or 'I' as variable names.\nNote: This rule is automatically disabled for all stub files\n(files with .pyi extensions). The rule has little relevance for authors\nof stubs: a well-written stub should aim to faithfully represent the\ninterface of the equivalent .py file as it exists at runtime, including any\nambiguously named variables in the runtime module."
    },
    {
        "patternId": "E742_ambiguous-class-name",
        "title": "ambiguous-class-name (E742)",
        "description": "Checks for the use of the characters 'l', 'O', or 'I' as class names."
    },
    {
        "patternId": "E743_ambiguous-function-name",
        "title": "ambiguous-function-name (E743)",
        "description": "Checks for the use of the characters 'l', 'O', or 'I' as function names."
    },
    {
        "patternId": "E902_io-error",
        "title": "io-error (E902)",
        "description": "This is not a regular diagnostic; instead, it's raised when a file cannot be read\nfrom disk."
    },
    {
        "patternId": "W191_tab-indentation",
        "title": "tab-indentation (W191)",
        "description": "Checks for indentation that uses tabs."
    },
    {
        "patternId": "W291_trailing-whitespace",
        "title": "trailing-whitespace (W291)",
        "description": "Checks for superfluous trailing whitespace."
    },
    {
        "patternId": "W292_missing-newline-at-end-of-file",
        "title": "missing-newline-at-end-of-file (W292)",
        "description": "Checks for files missing a new line at the end of the file."
    },
    {
        "patternId": "W293_blank-line-with-whitespace",
        "title": "blank-line-with-whitespace (W293)",
        "description": "Checks for superfluous whitespace in blank lines."
    },
    {
        "patternId": "W505_doc-line-too-long",
        "title": "doc-line-too-long (W505)",
        "description": "Checks for doc lines that exceed the specified maximum character length."
    },
    {
        "patternId": "W605_invalid-escape-sequence",
        "title": "invalid-escape-sequence (W605)",
        "description": "Checks for invalid escape sequences."
    },
    {
        "patternId": "D100_undocumented-public-module",
        "title": "undocumented-public-module (D100)",
        "description": "Checks for undocumented public module definitions."
    },
    {
        "patternId": "D101_undocumented-public-class",
        "title": "undocumented-public-class (D101)",
        "description": "Checks for undocumented public class definitions."
    },
    {
        "patternId": "D102_undocumented-public-method",
        "title": "undocumented-public-method (D102)",
        "description": "Checks for undocumented public method definitions."
    },
    {
        "patternId": "D103_undocumented-public-function",
        "title": "undocumented-public-function (D103)",
        "description": "Checks for undocumented public function definitions."
    },
    {
        "patternId": "D104_undocumented-public-package",
        "title": "undocumented-public-package (D104)",
        "description": "Checks for undocumented public package definitions."
    },
    {
        "patternId": "D105_undocumented-magic-method",
        "title": "undocumented-magic-method (D105)",
        "description": "Checks for undocumented magic method definitions."
    },
    {
        "patternId": "D106_undocumented-public-nested-class",
        "title": "undocumented-public-nested-class (D106)",
        "description": "Checks for undocumented public class definitions, for nested classes."
    },
    {
        "patternId": "D107_undocumented-public-init",
        "title": "undocumented-public-init (D107)",
        "description": "Checks for public __init__ method definitions that are missing\ndocstrings."
    },
    {
        "patternId": "D200_unnecessary-multiline-docstring",
        "title": "unnecessary-multiline-docstring (D200)",
        "description": "Checks for single-line docstrings that are broken across multiple lines."
    },
    {
        "patternId": "D201_blank-line-before-function",
        "title": "blank-line-before-function (D201)",
        "description": "Checks for docstrings on functions that are separated by one or more blank\nlines from the function definition."
    },
    {
        "patternId": "D202_blank-line-after-function",
        "title": "blank-line-after-function (D202)",
        "description": "Checks for docstrings on functions that are separated by one or more blank\nlines from the function body."
    },
    {
        "patternId": "D203_incorrect-blank-line-before-class",
        "title": "incorrect-blank-line-before-class (D203)",
        "description": "Checks for docstrings on class definitions that are not preceded by a\nblank line."
    },
    {
        "patternId": "D204_incorrect-blank-line-after-class",
        "title": "incorrect-blank-line-after-class (D204)",
        "description": "Checks for class methods that are not separated from the class's docstring\nby a blank line."
    },
    {
        "patternId": "D205_missing-blank-line-after-summary",
        "title": "missing-blank-line-after-summary (D205)",
        "description": "Checks for docstring summary lines that are not separated from the docstring\ndescription by one blank line."
    },
    {
        "patternId": "D206_docstring-tab-indentation",
        "title": "docstring-tab-indentation (D206)",
        "description": "Checks for docstrings that are indented with tabs."
    },
    {
        "patternId": "D207_under-indentation",
        "title": "under-indentation (D207)",
        "description": "Checks for under-indented docstrings."
    },
    {
        "patternId": "D208_over-indentation",
        "title": "over-indentation (D208)",
        "description": "Checks for over-indented docstrings."
    },
    {
        "patternId": "D209_new-line-after-last-paragraph",
        "title": "new-line-after-last-paragraph (D209)",
        "description": "Checks for multi-line docstrings whose closing quotes are not on their\nown line."
    },
    {
        "patternId": "D210_surrounding-whitespace",
        "title": "surrounding-whitespace (D210)",
        "description": "Checks for surrounding whitespace in docstrings."
    },
    {
        "patternId": "D211_blank-line-before-class",
        "title": "blank-line-before-class (D211)",
        "description": "Checks for docstrings on class definitions that are preceded by a blank\nline."
    },
    {
        "patternId": "D212_multi-line-summary-first-line",
        "title": "multi-line-summary-first-line (D212)",
        "description": "Checks for docstring summary lines that are not positioned on the first\nphysical line of the docstring."
    },
    {
        "patternId": "D213_multi-line-summary-second-line",
        "title": "multi-line-summary-second-line (D213)",
        "description": "Checks for docstring summary lines that are not positioned on the second\nphysical line of the docstring."
    },
    {
        "patternId": "D214_overindented-section",
        "title": "overindented-section (D214)",
        "description": "Checks for over-indented sections in docstrings."
    },
    {
        "patternId": "D215_overindented-section-underline",
        "title": "overindented-section-underline (D215)",
        "description": "Checks for over-indented section underlines in docstrings."
    },
    {
        "patternId": "D300_triple-single-quotes",
        "title": "triple-single-quotes (D300)",
        "description": "Checks for docstrings that use '''triple single quotes''' instead of\n\"\"\"triple double quotes\"\"\"."
    },
    {
        "patternId": "D301_escape-sequence-in-docstring",
        "title": "escape-sequence-in-docstring (D301)",
        "description": "Checks for docstrings that include backslashes, but are not defined as\nraw string literals."
    },
    {
        "patternId": "D400_missing-trailing-period",
        "title": "missing-trailing-period (D400)",
        "description": "Checks for docstrings in which the first line does not end in a period."
    },
    {
        "patternId": "D401_non-imperative-mood",
        "title": "non-imperative-mood (D401)",
        "description": "Checks for docstring first lines that are not in an imperative mood."
    },
    {
        "patternId": "D402_signature-in-docstring",
        "title": "signature-in-docstring (D402)",
        "description": "Checks for function docstrings that include the function's signature in\nthe summary line."
    },
    {
        "patternId": "D403_first-word-uncapitalized",
        "title": "first-word-uncapitalized (D403)",
        "description": "Checks for docstrings that do not start with a capital letter."
    },
    {
        "patternId": "D404_docstring-starts-with-this",
        "title": "docstring-starts-with-this (D404)",
        "description": "Checks for docstrings that start with This."
    },
    {
        "patternId": "D405_non-capitalized-section-name",
        "title": "non-capitalized-section-name (D405)",
        "description": "Checks for section headers in docstrings that do not begin with capital\nletters."
    },
    {
        "patternId": "D406_missing-new-line-after-section-name",
        "title": "missing-new-line-after-section-name (D406)",
        "description": "Checks for section headers in docstrings that are followed by non-newline\ncharacters."
    },
    {
        "patternId": "D407_missing-dashed-underline-after-section",
        "title": "missing-dashed-underline-after-section (D407)",
        "description": "Checks for section headers in docstrings that are not followed by\nunderlines."
    },
    {
        "patternId": "D408_missing-section-underline-after-name",
        "title": "missing-section-underline-after-name (D408)",
        "description": "Checks for section underlines in docstrings that are not on the line\nimmediately following the section name."
    },
    {
        "patternId": "D409_mismatched-section-underline-length",
        "title": "mismatched-section-underline-length (D409)",
        "description": "Checks for section underlines in docstrings that do not match the length of\nthe corresponding section header."
    },
    {
        "patternId": "D410_no-blank-line-after-section",
        "title": "no-blank-line-after-section (D410)",
        "description": "Checks for docstring sections that are not separated by a single blank\nline."
    },
    {
        "patternId": "D411_no-blank-line-before-section",
        "title": "no-blank-line-before-section (D411)",
        "description": "Checks for docstring sections that are not separated by a blank line."
    },
    {
        "patternId": "D412_blank-lines-between-header-and-content",
        "title": "blank-lines-between-header-and-content (D412)",
        "description": "Checks for docstring sections that contain blank lines between a section\nheader and a section body."
    },
    {
        "patternId": "D413_missing-blank-line-after-last-section",
        "title": "missing-blank-line-after-last-section (D413)",
        "description": "Checks for missing blank lines after the last section of a multiline\ndocstring."
    },
    {
        "patternId": "D414_empty-docstring-section",
        "title": "empty-docstring-section (D414)",
        "description": "Checks for docstrings with empty sections."
    },
    {
        "patternId": "D415_missing-terminal-punctuation",
        "title": "missing-terminal-punctuation (D415)",
        "description": "Checks for docstrings in which the first line does not end in a punctuation\nmark, such as a period, question mark, or exclamation point."
    },
    {
        "patternId": "D416_missing-section-name-colon",
        "title": "missing-section-name-colon (D416)",
        "description": "Checks for docstring section headers that do not end with a colon."
    },
    {
        "patternId": "D417_undocumented-param",
        "title": "undocumented-param (D417)",
        "description": "Checks for function docstrings that do not include documentation for all\nparameters in the function."
    },
    {
        "patternId": "D418_overload-with-docstring",
        "title": "overload-with-docstring (D418)",
        "description": "Checks for @overload function definitions that contain a docstring."
    },
    {
        "patternId": "D419_empty-docstring",
        "title": "empty-docstring (D419)",
        "description": "Checks for empty docstrings."
    },
    {
        "patternId": "F401_unused-import",
        "title": "unused-import (F401)",
        "description": "Checks for unused imports."
    },
    {
        "patternId": "F402_import-shadowed-by-loop-var",
        "title": "import-shadowed-by-loop-var (F402)",
        "description": "Checks for import bindings that are shadowed by loop variables."
    },
    {
        "patternId": "F403_undefined-local-with-import-star",
        "title": "undefined-local-with-import-star (F403)",
        "description": "Checks for the use of wildcard imports."
    },
    {
        "patternId": "F404_late-future-import",
        "title": "late-future-import (F404)",
        "description": "Checks for __future__ imports that are not located at the beginning of a\nfile."
    },
    {
        "patternId": "F405_undefined-local-with-import-star-usage",
        "title": "undefined-local-with-import-star-usage (F405)",
        "description": "Checks for names that might be undefined, but may also be defined in a\nwildcard import."
    },
    {
        "patternId": "F406_undefined-local-with-nested-import-star-usage",
        "title": "undefined-local-with-nested-import-star-usage (F406)",
        "description": "Check for the use of wildcard imports outside of the module namespace."
    },
    {
        "patternId": "F407_future-feature-not-defined",
        "title": "future-feature-not-defined (F407)",
        "description": "Checks for __future__ imports that are not defined in the current Python\nversion."
    },
    {
        "patternId": "F501_percent-format-invalid-format",
        "title": "percent-format-invalid-format (F501)",
        "description": "Checks for invalid printf-style format strings."
    },
    {
        "patternId": "F502_percent-format-expected-mapping",
        "title": "percent-format-expected-mapping (F502)",
        "description": "Checks for named placeholders in printf-style format strings without\nmapping-type values."
    },
    {
        "patternId": "F503_percent-format-expected-sequence",
        "title": "percent-format-expected-sequence (F503)",
        "description": "Checks for uses of mapping-type values in printf-style format strings\nwithout named placeholders."
    },
    {
        "patternId": "F504_percent-format-extra-named-arguments",
        "title": "percent-format-extra-named-arguments (F504)",
        "description": "Checks for unused mapping keys in printf-style format strings."
    },
    {
        "patternId": "F505_percent-format-missing-argument",
        "title": "percent-format-missing-argument (F505)",
        "description": "Checks for named placeholders in printf-style format strings that are not\npresent in the provided mapping."
    },
    {
        "patternId": "F506_percent-format-mixed-positional-and-named",
        "title": "percent-format-mixed-positional-and-named (F506)",
        "description": "Checks for printf-style format strings that have mixed positional and\nnamed placeholders."
    },
    {
        "patternId": "F507_percent-format-positional-count-mismatch",
        "title": "percent-format-positional-count-mismatch (F507)",
        "description": "Checks for printf-style format strings that have a mismatch between the\nnumber of positional placeholders and the number of substitution values."
    },
    {
        "patternId": "F508_percent-format-star-requires-sequence",
        "title": "percent-format-star-requires-sequence (F508)",
        "description": "Checks for printf-style format strings that use the * specifier with\nnon-tuple values."
    },
    {
        "patternId": "F509_percent-format-unsupported-format-character",
        "title": "percent-format-unsupported-format-character (F509)",
        "description": "Checks for printf-style format strings with invalid format characters."
    },
    {
        "patternId": "F521_string-dot-format-invalid-format",
        "title": "string-dot-format-invalid-format (F521)",
        "description": "Checks for str.format calls with invalid format strings."
    },
    {
        "patternId": "F522_string-dot-format-extra-named-arguments",
        "title": "string-dot-format-extra-named-arguments (F522)",
        "description": "Checks for str.format calls with unused keyword arguments."
    },
    {
        "patternId": "F523_string-dot-format-extra-positional-arguments",
        "title": "string-dot-format-extra-positional-arguments (F523)",
        "description": "Checks for str.format calls with unused positional arguments."
    },
    {
        "patternId": "F524_string-dot-format-missing-arguments",
        "title": "string-dot-format-missing-arguments (F524)",
        "description": "Checks for str.format calls with placeholders that are missing arguments."
    },
    {
        "patternId": "F525_string-dot-format-mixing-automatic",
        "title": "string-dot-format-mixing-automatic (F525)",
        "description": "Checks for str.format calls that mix automatic and manual numbering."
    },
    {
        "patternId": "F541_f-string-missing-placeholders",
        "title": "f-string-missing-placeholders (F541)",
        "description": "Checks for f-strings that do not contain any placeholder expressions."
    },
    {
        "patternId": "F601_multi-value-repeated-key-literal",
        "title": "multi-value-repeated-key-literal (F601)",
        "description": "Checks for dictionary literals that associate multiple values with the\nsame key."
    },
    {
        "patternId": "F602_multi-value-repeated-key-variable",
        "title": "multi-value-repeated-key-variable (F602)",
        "description": "Checks for dictionary keys that are repeated with different values."
    },
    {
        "patternId": "F621_expressions-in-star-assignment",
        "title": "expressions-in-star-assignment (F621)",
        "description": "Checks for the use of too many expressions in starred assignment statements."
    },
    {
        "patternId": "F622_multiple-starred-expressions",
        "title": "multiple-starred-expressions (F622)",
        "description": "Checks for the use of multiple starred expressions in assignment statements."
    },
    {
        "patternId": "F631_assert-tuple",
        "title": "assert-tuple (F631)",
        "description": "Checks for assert statements that use non-empty tuples as test\nconditions."
    },
    {
        "patternId": "F632_is-literal",
        "title": "is-literal (F632)",
        "description": "Checks for is and is not comparisons against literals, like integers,\nstrings, or lists."
    },
    {
        "patternId": "F633_invalid-print-syntax",
        "title": "invalid-print-syntax (F633)",
        "description": "Checks for print statements that use the >> syntax."
    },
    {
        "patternId": "F634_if-tuple",
        "title": "if-tuple (F634)",
        "description": "Checks for if statements that use non-empty tuples as test conditions."
    },
    {
        "patternId": "F701_break-outside-loop",
        "title": "break-outside-loop (F701)",
        "description": "Checks for break statements outside of loops."
    },
    {
        "patternId": "F702_continue-outside-loop",
        "title": "continue-outside-loop (F702)",
        "description": "Checks for continue statements outside of loops."
    },
    {
        "patternId": "F704_yield-outside-function",
        "title": "yield-outside-function (F704)",
        "description": "Checks for yield, yield from, and await usages outside of functions."
    },
    {
        "patternId": "F706_return-outside-function",
        "title": "return-outside-function (F706)",
        "description": "Checks for return statements outside of functions."
    },
    {
        "patternId": "F707_default-except-not-last",
        "title": "default-except-not-last (F707)",
        "description": "Checks for except blocks that handle all exceptions, but are not the last\nexcept block in a try statement."
    },
    {
        "patternId": "F722_forward-annotation-syntax-error",
        "title": "forward-annotation-syntax-error (F722)",
        "description": "Checks for forward annotations that include invalid syntax."
    },
    {
        "patternId": "F811_redefined-while-unused",
        "title": "redefined-while-unused (F811)",
        "description": "Checks for variable definitions that redefine (or \"shadow\") unused\nvariables."
    },
    {
        "patternId": "F821_undefined-name",
        "title": "undefined-name (F821)",
        "description": "Checks for uses of undefined names."
    },
    {
        "patternId": "F822_undefined-export",
        "title": "undefined-export (F822)",
        "description": "Checks for undefined names in __all__."
    },
    {
        "patternId": "F823_undefined-local",
        "title": "undefined-local (F823)",
        "description": "Checks for undefined local variables."
    },
    {
        "patternId": "F841_unused-variable",
        "title": "unused-variable (F841)",
        "description": "Checks for the presence of unused variables in function scopes."
    },
    {
        "patternId": "F842_unused-annotation",
        "title": "unused-annotation (F842)",
        "description": "Checks for local variables that are annotated but never used."
    },
    {
        "patternId": "F901_raise-not-implemented",
        "title": "raise-not-implemented (F901)",
        "description": "Checks for raise statements that raise NotImplemented."
    },
    {
        "patternId": "PGH003_blanket-type-ignore",
        "title": "blanket-type-ignore (PGH003)",
        "description": "Check for type: ignore annotations that suppress all type warnings, as\nopposed to targeting specific type warnings."
    },
    {
        "patternId": "PGH004_blanket-noqa",
        "title": "blanket-noqa (PGH004)",
        "description": "Check for noqa annotations that suppress all diagnostics, as opposed to\ntargeting specific diagnostics."
    },
    {
        "patternId": "PGH005_invalid-mock-access",
        "title": "invalid-mock-access (PGH005)",
        "description": "Checks for common mistakes when using mock objects."
    },
    {
        "patternId": "PLC0105_type-name-incorrect-variance",
        "title": "type-name-incorrect-variance (PLC0105)",
        "description": "Checks for type names that do not match the variance of their associated\ntype parameter."
    },
    {
        "patternId": "PLC0131_type-bivariance",
        "title": "type-bivariance (PLC0131)",
        "description": "Checks for TypeVar and ParamSpec definitions in which the type is\nboth covariant and contravariant."
    },
    {
        "patternId": "PLC0132_type-param-name-mismatch",
        "title": "type-param-name-mismatch (PLC0132)",
        "description": "Checks for TypeVar, TypeVarTuple, ParamSpec, and NewType\ndefinitions in which the name of the type parameter does not match the name\nof the variable to which it is assigned."
    },
    {
        "patternId": "PLC0205_single-string-slots",
        "title": "single-string-slots (PLC0205)",
        "description": "Checks for single strings assigned to __slots__."
    },
    {
        "patternId": "PLC0206_dict-index-missing-items",
        "title": "dict-index-missing-items (PLC0206)",
        "description": "Checks for dictionary iterations that extract the dictionary value\nvia explicit indexing, instead of using .items()."
    },
    {
        "patternId": "PLC0208_iteration-over-set",
        "title": "iteration-over-set (PLC0208)",
        "description": "Checks for iteration over a set literal where each element in the set is\nitself a literal value."
    },
    {
        "patternId": "PLC0414_useless-import-alias",
        "title": "useless-import-alias (PLC0414)",
        "description": "Checks for import aliases that do not rename the original package."
    },
    {
        "patternId": "PLC2401_non-ascii-name",
        "title": "non-ascii-name (PLC2401)",
        "description": "Checks for the use of non-ASCII characters in variable names."
    },
    {
        "patternId": "PLC2403_non-ascii-import-name",
        "title": "non-ascii-import-name (PLC2403)",
        "description": "Checks for the use of non-ASCII characters in import statements."
    },
    {
        "patternId": "PLC3002_unnecessary-direct-lambda-call",
        "title": "unnecessary-direct-lambda-call (PLC3002)",
        "description": "Checks for unnecessary direct calls to lambda expressions."
    },
    {
        "patternId": "PLE0100_yield-in-init",
        "title": "yield-in-init (PLE0100)",
        "description": "Checks for __init__ methods that are turned into generators by the\ninclusion of yield or yield from expressions."
    },
    {
        "patternId": "PLE0101_return-in-init",
        "title": "return-in-init (PLE0101)",
        "description": "Checks for __init__ methods that return values."
    },
    {
        "patternId": "PLE0115_nonlocal-and-global",
        "title": "nonlocal-and-global (PLE0115)",
        "description": "Checks for variables which are both declared as both nonlocal and\nglobal."
    },
    {
        "patternId": "PLE0116_continue-in-finally",
        "title": "continue-in-finally (PLE0116)",
        "description": "Checks for continue statements inside finally"
    },
    {
        "patternId": "PLE0117_nonlocal-without-binding",
        "title": "nonlocal-without-binding (PLE0117)",
        "description": "Checks for nonlocal names without bindings."
    },
    {
        "patternId": "PLE0118_load-before-global-declaration",
        "title": "load-before-global-declaration (PLE0118)",
        "description": "Checks for uses of names that are declared as global prior to the\nrelevant global declaration."
    },
    {
        "patternId": "PLE0237_non-slot-assignment",
        "title": "non-slot-assignment (PLE0237)",
        "description": "Checks for assignments to attributes that are not defined in __slots__."
    },
    {
        "patternId": "PLE0241_duplicate-bases",
        "title": "duplicate-bases (PLE0241)",
        "description": "Checks for duplicate base classes in class definitions."
    },
    {
        "patternId": "PLE0302_unexpected-special-method-signature",
        "title": "unexpected-special-method-signature (PLE0302)",
        "description": "Checks for \"special\" methods that have an unexpected method signature."
    },
    {
        "patternId": "PLE0303_invalid-length-return-type",
        "title": "invalid-length-return-type (PLE0303)",
        "description": "Checks for __len__ implementations that return values that are not non-negative\nintegers."
    },
    {
        "patternId": "PLE0305_invalid-index-return-type",
        "title": "invalid-index-return-type (PLE0305)",
        "description": "Checks for __index__ implementations that return non-integer values."
    },
    {
        "patternId": "PLE0307_invalid-str-return-type",
        "title": "invalid-str-return-type (PLE0307)",
        "description": "Checks for __str__ implementations that return a type other than str."
    },
    {
        "patternId": "PLE0308_invalid-bytes-return-type",
        "title": "invalid-bytes-return-type (PLE0308)",
        "description": "Checks for __bytes__ implementations that return types other than bytes."
    },
    {
        "patternId": "PLE0309_invalid-hash-return-type",
        "title": "invalid-hash-return-type (PLE0309)",
        "description": "Checks for __hash__ implementations that return non-integer values."
    },
    {
        "patternId": "PLE0604_invalid-all-object",
        "title": "invalid-all-object (PLE0604)",
        "description": "Checks for the inclusion of invalid objects in __all__."
    },
    {
        "patternId": "PLE0605_invalid-all-format",
        "title": "invalid-all-format (PLE0605)",
        "description": "Checks for invalid assignments to __all__."
    },
    {
        "patternId": "PLE0643_potential-index-error",
        "title": "potential-index-error (PLE0643)",
        "description": "Checks for hard-coded sequence accesses that are known to be out of bounds."
    },
    {
        "patternId": "PLE0704_misplaced-bare-raise",
        "title": "misplaced-bare-raise (PLE0704)",
        "description": "Checks for bare raise statements outside of exception handlers."
    },
    {
        "patternId": "PLE1132_repeated-keyword-argument",
        "title": "repeated-keyword-argument (PLE1132)",
        "description": "Checks for repeated keyword arguments in function calls."
    },
    {
        "patternId": "PLE1142_await-outside-async",
        "title": "await-outside-async (PLE1142)",
        "description": "Checks for uses of await outside async functions."
    },
    {
        "patternId": "PLE1205_logging-too-many-args",
        "title": "logging-too-many-args (PLE1205)",
        "description": "Checks for too many positional arguments for a logging format string."
    },
    {
        "patternId": "PLE1206_logging-too-few-args",
        "title": "logging-too-few-args (PLE1206)",
        "description": "Checks for too few positional arguments for a logging format string."
    },
    {
        "patternId": "PLE1300_bad-string-format-character",
        "title": "bad-string-format-character (PLE1300)",
        "description": "Checks for unsupported format types in format strings."
    },
    {
        "patternId": "PLE1307_bad-string-format-type",
        "title": "bad-string-format-type (PLE1307)",
        "description": "Checks for mismatched argument types in \"old-style\" format strings."
    },
    {
        "patternId": "PLE1310_bad-str-strip-call",
        "title": "bad-str-strip-call (PLE1310)",
        "description": "Checks duplicate characters in str.strip calls."
    },
    {
        "patternId": "PLE1507_invalid-envvar-value",
        "title": "invalid-envvar-value (PLE1507)",
        "description": "Checks for os.getenv calls with an invalid key argument."
    },
    {
        "patternId": "PLE1519_singledispatch-method",
        "title": "singledispatch-method (PLE1519)",
        "description": "Checks for methods decorated with @singledispatch."
    },
    {
        "patternId": "PLE1520_singledispatchmethod-function",
        "title": "singledispatchmethod-function (PLE1520)",
        "description": "Checks for non-method functions decorated with @singledispatchmethod."
    },
    {
        "patternId": "PLE1700_yield-from-in-async-function",
        "title": "yield-from-in-async-function (PLE1700)",
        "description": "Checks for uses of yield from in async functions."
    },
    {
        "patternId": "PLE2502_bidirectional-unicode",
        "title": "bidirectional-unicode (PLE2502)",
        "description": "Checks for bidirectional unicode characters."
    },
    {
        "patternId": "PLE2510_invalid-character-backspace",
        "title": "invalid-character-backspace (PLE2510)",
        "description": "Checks for strings that contain the control character BS."
    },
    {
        "patternId": "PLE2512_invalid-character-sub",
        "title": "invalid-character-sub (PLE2512)",
        "description": "Checks for strings that contain the raw control character SUB."
    },
    {
        "patternId": "PLE2513_invalid-character-esc",
        "title": "invalid-character-esc (PLE2513)",
        "description": "Checks for strings that contain the raw control character ESC."
    },
    {
        "patternId": "PLE2514_invalid-character-nul",
        "title": "invalid-character-nul (PLE2514)",
        "description": "Checks for strings that contain the raw control character NUL (0 byte)."
    },
    {
        "patternId": "PLE2515_invalid-character-zero-width-space",
        "title": "invalid-character-zero-width-space (PLE2515)",
        "description": "Checks for strings that contain the zero width space character."
    },
    {
        "patternId": "PLR0124_comparison-with-itself",
        "title": "comparison-with-itself (PLR0124)",
        "description": "Checks for operations that compare a name to itself."
    },
    {
        "patternId": "PLR0133_comparison-of-constant",
        "title": "comparison-of-constant (PLR0133)",
        "description": "Checks for comparisons between constants."
    },
    {
        "patternId": "PLR0206_property-with-parameters",
        "title": "property-with-parameters (PLR0206)",
        "description": "Checks for property definitions that accept function parameters."
    },
    {
        "patternId": "PLR0402_manual-from-import",
        "title": "manual-from-import (PLR0402)",
        "description": "Checks for submodule imports that are aliased to the submodule name."
    },
    {
        "patternId": "PLR0911_too-many-return-statements",
        "title": "too-many-return-statements (PLR0911)",
        "description": "Checks for functions or methods with too many return statements.\nBy default, this rule allows up to six return statements, as configured by\nthe lint.pylint.max-returns option."
    },
    {
        "patternId": "PLR0912_too-many-branches",
        "title": "too-many-branches (PLR0912)",
        "description": "Checks for functions or methods with too many branches, including (nested)\nif, elif, and else branches, for loops, try-except clauses, and\nmatch and case statements.\nBy default, this rule allows up to 12 branches. This can be configured\nusing the lint.pylint.max-branches option."
    },
    {
        "patternId": "PLR0913_too-many-arguments",
        "title": "too-many-arguments (PLR0913)",
        "description": "Checks for function definitions that include too many arguments.\nBy default, this rule allows up to five arguments, as configured by the\nlint.pylint.max-args option."
    },
    {
        "patternId": "PLR0915_too-many-statements",
        "title": "too-many-statements (PLR0915)",
        "description": "Checks for functions or methods with too many statements.\nBy default, this rule allows up to 50 statements, as configured by the\nlint.pylint.max-statements option."
    },
    {
        "patternId": "PLR1704_redefined-argument-from-local",
        "title": "redefined-argument-from-local (PLR1704)",
        "description": "Checks for variables defined in for, try, with statements\nthat redefine function parameters."
    },
    {
        "patternId": "PLR1711_useless-return",
        "title": "useless-return (PLR1711)",
        "description": "Checks for functions that end with an unnecessary return or\nreturn None, and contain no other return statements."
    },
    {
        "patternId": "PLR1714_repeated-equality-comparison",
        "title": "repeated-equality-comparison (PLR1714)",
        "description": "Checks for repeated equality comparisons that can rewritten as a membership\ntest."
    },
    {
        "patternId": "PLR1716_boolean-chained-comparison",
        "title": "boolean-chained-comparison (PLR1716)",
        "description": "Check for chained boolean operations that can be simplified."
    },
    {
        "patternId": "PLR1722_sys-exit-alias",
        "title": "sys-exit-alias (PLR1722)",
        "description": "Checks for uses of the exit() and quit()."
    },
    {
        "patternId": "PLR1730_if-stmt-min-max",
        "title": "if-stmt-min-max (PLR1730)",
        "description": "Checks for if statements that can be replaced with min() or max()\ncalls."
    },
    {
        "patternId": "PLR1736_unnecessary-list-index-lookup",
        "title": "unnecessary-list-index-lookup (PLR1736)",
        "description": "Checks for index-based list accesses during enumerate iterations."
    },
    {
        "patternId": "PLR2004_magic-value-comparison",
        "title": "magic-value-comparison (PLR2004)",
        "description": "Checks for the use of unnamed numerical constants (\"magic\") values in\ncomparisons."
    },
    {
        "patternId": "PLR2044_empty-comment",
        "title": "empty-comment (PLR2044)",
        "description": "Checks for a # symbol appearing on a line not followed by an actual comment."
    },
    {
        "patternId": "PLR5501_collapsible-else-if",
        "title": "collapsible-else-if (PLR5501)",
        "description": "Checks for else blocks that consist of a single if statement."
    },
    {
        "patternId": "PLW0120_useless-else-on-loop",
        "title": "useless-else-on-loop (PLW0120)",
        "description": "Checks for else clauses on loops without a break statement."
    },
    {
        "patternId": "PLW0127_self-assigning-variable",
        "title": "self-assigning-variable (PLW0127)",
        "description": "Checks for self-assignment of variables."
    },
    {
        "patternId": "PLW0128_redeclared-assigned-name",
        "title": "redeclared-assigned-name (PLW0128)",
        "description": "Checks for declared assignments to the same variable multiple times\nin the same assignment."
    },
    {
        "patternId": "PLW0129_assert-on-string-literal",
        "title": "assert-on-string-literal (PLW0129)",
        "description": "Checks for assert statements that use a string literal as the first\nargument."
    },
    {
        "patternId": "PLW0131_named-expr-without-context",
        "title": "named-expr-without-context (PLW0131)",
        "description": "Checks for uses of named expressions (e.g., a := 42) that can be\nreplaced by regular assignment statements (e.g., a = 42)."
    },
    {
        "patternId": "PLW0133_useless-exception-statement",
        "title": "useless-exception-statement (PLW0133)",
        "description": "Checks for an exception that is not raised."
    },
    {
        "patternId": "PLW0211_bad-staticmethod-argument",
        "title": "bad-staticmethod-argument (PLW0211)",
        "description": "Checks for static methods that use self or cls as their first argument.\nIf preview mode is enabled, this rule also applies to\n__new__ methods, which are implicitly static."
    },
    {
        "patternId": "PLW0245_super-without-brackets",
        "title": "super-without-brackets (PLW0245)",
        "description": "Detects attempts to use super without parentheses."
    },
    {
        "patternId": "PLW0406_import-self",
        "title": "import-self (PLW0406)",
        "description": "Checks for import statements that import the current module."
    },
    {
        "patternId": "PLW0602_global-variable-not-assigned",
        "title": "global-variable-not-assigned (PLW0602)",
        "description": "Checks for global variables that are not assigned a value in the current\nscope."
    },
    {
        "patternId": "PLW0603_global-statement",
        "title": "global-statement (PLW0603)",
        "description": "Checks for the use of global statements to update identifiers."
    },
    {
        "patternId": "PLW0604_global-at-module-level",
        "title": "global-at-module-level (PLW0604)",
        "description": "Checks for uses of the global keyword at the module level."
    },
    {
        "patternId": "PLW0642_self-or-cls-assignment",
        "title": "self-or-cls-assignment (PLW0642)",
        "description": "Checks for assignment of self and cls in instance and class methods respectively.\nThis check also applies to __new__ even though this is technically\na static method."
    },
    {
        "patternId": "PLW0711_binary-op-exception",
        "title": "binary-op-exception (PLW0711)",
        "description": "Checks for except clauses that attempt to catch multiple\nexceptions with a binary operation (and or or)."
    },
    {
        "patternId": "PLW1501_bad-open-mode",
        "title": "bad-open-mode (PLW1501)",
        "description": "Check for an invalid mode argument in open calls."
    },
    {
        "patternId": "PLW1508_invalid-envvar-default",
        "title": "invalid-envvar-default (PLW1508)",
        "description": "Checks for os.getenv calls with invalid default values."
    },
    {
        "patternId": "PLW1509_subprocess-popen-preexec-fn",
        "title": "subprocess-popen-preexec-fn (PLW1509)",
        "description": "Checks for uses of subprocess.Popen with a preexec_fn argument."
    },
    {
        "patternId": "PLW1510_subprocess-run-without-check",
        "title": "subprocess-run-without-check (PLW1510)",
        "description": "Checks for uses of subprocess.run without an explicit check argument."
    },
    {
        "patternId": "PLW2101_useless-with-lock",
        "title": "useless-with-lock (PLW2101)",
        "description": "Checks for lock objects that are created and immediately discarded in\nwith statements."
    },
    {
        "patternId": "PLW2901_redefined-loop-name",
        "title": "redefined-loop-name (PLW2901)",
        "description": "Checks for variables defined in for loops and with statements that\nget overwritten within the body, for example by another for loop or\nwith statement or by direct assignment."
    },
    {
        "patternId": "PLW3301_nested-min-max",
        "title": "nested-min-max (PLW3301)",
        "description": "Checks for nested min and max calls."
    },
    {
        "patternId": "UP001_useless-metaclass-type",
        "title": "useless-metaclass-type (UP001)",
        "description": "Checks for the use of __metaclass__ = type in class definitions."
    },
    {
        "patternId": "UP003_type-of-primitive",
        "title": "type-of-primitive (UP003)",
        "description": "Checks for uses of type that take a primitive as an argument."
    },
    {
        "patternId": "UP004_useless-object-inheritance",
        "title": "useless-object-inheritance (UP004)",
        "description": "Checks for classes that inherit from object."
    },
    {
        "patternId": "UP005_deprecated-unittest-alias",
        "title": "deprecated-unittest-alias (UP005)",
        "description": "Checks for uses of deprecated methods from the unittest module."
    },
    {
        "patternId": "UP006_non-pep585-annotation",
        "title": "non-pep585-annotation (UP006)",
        "description": "Checks for the use of generics that can be replaced with standard library\nvariants based on PEP 585."
    },
    {
        "patternId": "UP007_non-pep604-annotation-union",
        "title": "non-pep604-annotation-union (UP007)",
        "description": "Check for type annotations that can be rewritten based on PEP 604 syntax."
    },
    {
        "patternId": "UP008_super-call-with-parameters",
        "title": "super-call-with-parameters (UP008)",
        "description": "Checks for super calls that pass redundant arguments."
    },
    {
        "patternId": "UP009_utf8-encoding-declaration",
        "title": "utf8-encoding-declaration (UP009)",
        "description": "Checks for unnecessary UTF-8 encoding declarations."
    },
    {
        "patternId": "UP010_unnecessary-future-import",
        "title": "unnecessary-future-import (UP010)",
        "description": "Checks for unnecessary __future__ imports."
    },
    {
        "patternId": "UP011_lru-cache-without-parameters",
        "title": "lru-cache-without-parameters (UP011)",
        "description": "Checks for unnecessary parentheses on functools.lru_cache decorators."
    },
    {
        "patternId": "UP012_unnecessary-encode-utf8",
        "title": "unnecessary-encode-utf8 (UP012)",
        "description": "Checks for unnecessary calls to encode as UTF-8."
    },
    {
        "patternId": "UP013_convert-typed-dict-functional-to-class",
        "title": "convert-typed-dict-functional-to-class (UP013)",
        "description": "Checks for TypedDict declarations that use functional syntax."
    },
    {
        "patternId": "UP014_convert-named-tuple-functional-to-class",
        "title": "convert-named-tuple-functional-to-class (UP014)",
        "description": "Checks for NamedTuple declarations that use functional syntax."
    },
    {
        "patternId": "UP015_redundant-open-modes",
        "title": "redundant-open-modes (UP015)",
        "description": "Checks for redundant open mode arguments."
    },
    {
        "patternId": "UP017_datetime-timezone-utc",
        "title": "datetime-timezone-utc (UP017)",
        "description": "Checks for uses of datetime.timezone.utc."
    },
    {
        "patternId": "UP018_native-literals",
        "title": "native-literals (UP018)",
        "description": "Checks for unnecessary calls to str, bytes, int, float, and bool."
    },
    {
        "patternId": "UP019_typing-text-str-alias",
        "title": "typing-text-str-alias (UP019)",
        "description": "Checks for uses of typing.Text."
    },
    {
        "patternId": "UP020_open-alias",
        "title": "open-alias (UP020)",
        "description": "Checks for uses of io.open."
    },
    {
        "patternId": "UP021_replace-universal-newlines",
        "title": "replace-universal-newlines (UP021)",
        "description": "Checks for uses of subprocess.run that set the universal_newlines\nkeyword argument."
    },
    {
        "patternId": "UP022_replace-stdout-stderr",
        "title": "replace-stdout-stderr (UP022)",
        "description": "Checks for uses of subprocess.run that send stdout and stderr to a\npipe."
    },
    {
        "patternId": "UP023_deprecated-c-element-tree",
        "title": "deprecated-c-element-tree (UP023)",
        "description": "Checks for uses of the xml.etree.cElementTree module."
    },
    {
        "patternId": "UP024_os-error-alias",
        "title": "os-error-alias (UP024)",
        "description": "Checks for uses of exceptions that alias OSError."
    },
    {
        "patternId": "UP025_unicode-kind-prefix",
        "title": "unicode-kind-prefix (UP025)",
        "description": "Checks for uses of the Unicode kind prefix (u) in strings."
    },
    {
        "patternId": "UP026_deprecated-mock-import",
        "title": "deprecated-mock-import (UP026)",
        "description": "Checks for imports of the mock module that should be replaced with\nunittest.mock."
    },
    {
        "patternId": "UP028_yield-in-for-loop",
        "title": "yield-in-for-loop (UP028)",
        "description": "Checks for for loops that can be replaced with yield from expressions."
    },
    {
        "patternId": "UP029_unnecessary-builtin-import",
        "title": "unnecessary-builtin-import (UP029)",
        "description": "Checks for unnecessary imports of builtins."
    },
    {
        "patternId": "UP030_format-literals",
        "title": "format-literals (UP030)",
        "description": "Checks for unnecessary positional indices in format strings."
    },
    {
        "patternId": "UP031_printf-string-formatting",
        "title": "printf-string-formatting (UP031)",
        "description": "Checks for printf-style string formatting, and offers to replace it with\nstr.format calls."
    },
    {
        "patternId": "UP032_f-string",
        "title": "f-string (UP032)",
        "description": "Checks for str.format calls that can be replaced with f-strings."
    },
    {
        "patternId": "UP033_lru-cache-with-maxsize-none",
        "title": "lru-cache-with-maxsize-none (UP033)",
        "description": "Checks for uses of functools.lru_cache that set maxsize=None."
    },
    {
        "patternId": "UP034_extraneous-parentheses",
        "title": "extraneous-parentheses (UP034)",
        "description": "Checks for extraneous parentheses."
    },
    {
        "patternId": "UP035_deprecated-import",
        "title": "deprecated-import (UP035)",
        "description": "Checks for uses of deprecated imports based on the minimum supported\nPython version."
    },
    {
        "patternId": "UP036_outdated-version-block",
        "title": "outdated-version-block (UP036)",
        "description": "Checks for conditional blocks gated on sys.version_info comparisons\nthat are outdated for the minimum supported Python version."
    },
    {
        "patternId": "UP037_quoted-annotation",
        "title": "quoted-annotation (UP037)",
        "description": "Checks for the presence of unnecessary quotes in type annotations."
    },
    {
        "patternId": "UP038_non-pep604-isinstance",
        "title": "non-pep604-isinstance (UP038)",
        "description": "Checks for uses of isinstance and issubclass that take a tuple\nof types for comparison."
    },
    {
        "patternId": "UP039_unnecessary-class-parentheses",
        "title": "unnecessary-class-parentheses (UP039)",
        "description": "Checks for class definitions that include unnecessary parentheses after\nthe class name."
    },
    {
        "patternId": "UP040_non-pep695-type-alias",
        "title": "non-pep695-type-alias (UP040)",
        "description": "Checks for use of TypeAlias annotations and TypeAliasType assignments\nfor declaring type aliases."
    },
    {
        "patternId": "UP041_timeout-error-alias",
        "title": "timeout-error-alias (UP041)",
        "description": "Checks for uses of exceptions that alias TimeoutError."
    },
    {
        "patternId": "UP043_unnecessary-default-type-args",
        "title": "unnecessary-default-type-args (UP043)",
        "description": "Checks for unnecessary default type arguments for Generator and\nAsyncGenerator on Python 3.13+."
    },
    {
        "patternId": "FURB105_print-empty-string",
        "title": "print-empty-string (FURB105)",
        "description": "Checks for print calls with unnecessary empty strings as positional\narguments and unnecessary sep keyword arguments."
    },
    {
        "patternId": "FURB129_readlines-in-for",
        "title": "readlines-in-for (FURB129)",
        "description": "Checks for uses of readlines() when iterating over a file line-by-line."
    },
    {
        "patternId": "FURB136_if-expr-min-max",
        "title": "if-expr-min-max (FURB136)",
        "description": "Checks for if expressions that can be replaced with min() or max()\ncalls."
    },
    {
        "patternId": "FURB161_bit-count",
        "title": "bit-count (FURB161)",
        "description": "Checks for uses of bin(...).count(\"1\") to perform a population count."
    },
    {
        "patternId": "FURB163_redundant-log-base",
        "title": "redundant-log-base (FURB163)",
        "description": "Checks for math.log calls with a redundant base."
    },
    {
        "patternId": "FURB167_regex-flag-alias",
        "title": "regex-flag-alias (FURB167)",
        "description": "Checks for the use of shorthand aliases for regular expression flags\n(e.g., re.I instead of re.IGNORECASE)."
    },
    {
        "patternId": "FURB168_isinstance-type-none",
        "title": "isinstance-type-none (FURB168)",
        "description": "Checks for uses of isinstance that check if an object is of type None."
    },
    {
        "patternId": "FURB169_type-none-comparison",
        "title": "type-none-comparison (FURB169)",
        "description": "Checks for uses of type that compare the type of an object to the type of None."
    },
    {
        "patternId": "FURB177_implicit-cwd",
        "title": "implicit-cwd (FURB177)",
        "description": "Checks for current-directory lookups using Path().resolve()."
    },
    {
        "patternId": "FURB181_hashlib-digest-hex",
        "title": "hashlib-digest-hex (FURB181)",
        "description": "Checks for the use of .digest().hex() on a hashlib hash, like sha512."
    },
    {
        "patternId": "FURB187_list-reverse-copy",
        "title": "list-reverse-copy (FURB187)",
        "description": "Checks for list reversals that can be performed in-place in lieu of\ncreating a new list."
    },
    {
        "patternId": "FURB188_slice-to-remove-prefix-or-suffix",
        "title": "slice-to-remove-prefix-or-suffix (FURB188)",
        "description": "Checks for code that could be written more idiomatically using\nstr.removeprefix()\nor str.removesuffix().\nSpecifically, the rule flags code that conditionally removes a prefix or suffix\nusing a slice operation following an if test that uses str.startswith() or str.endswith().\nThe rule is only applied if your project targets Python 3.9 or later."
    },
    {
        "patternId": "RUF001_ambiguous-unicode-character-string",
        "title": "ambiguous-unicode-character-string (RUF001)",
        "description": "Checks for ambiguous Unicode characters in strings."
    },
    {
        "patternId": "RUF002_ambiguous-unicode-character-docstring",
        "title": "ambiguous-unicode-character-docstring (RUF002)",
        "description": "Checks for ambiguous Unicode characters in docstrings."
    },
    {
        "patternId": "RUF003_ambiguous-unicode-character-comment",
        "title": "ambiguous-unicode-character-comment (RUF003)",
        "description": "Checks for ambiguous Unicode characters in comments."
    },
    {
        "patternId": "RUF005_collection-literal-concatenation",
        "title": "collection-literal-concatenation (RUF005)",
        "description": "Checks for uses of the + operator to concatenate collections."
    },
    {
        "patternId": "RUF006_asyncio-dangling-task",
        "title": "asyncio-dangling-task (RUF006)",
        "description": "Checks for asyncio.create_task and asyncio.ensure_future calls\nthat do not store a reference to the returned result."
    },
    {
        "patternId": "RUF007_zip-instead-of-pairwise",
        "title": "zip-instead-of-pairwise (RUF007)",
        "description": "Checks for use of zip() to iterate over successive pairs of elements."
    },
    {
        "patternId": "RUF008_mutable-dataclass-default",
        "title": "mutable-dataclass-default (RUF008)",
        "description": "Checks for mutable default values in dataclass attributes."
    },
    {
        "patternId": "RUF009_function-call-in-dataclass-default-argument",
        "title": "function-call-in-dataclass-default-argument (RUF009)",
        "description": "Checks for function calls in dataclass attribute defaults."
    },
    {
        "patternId": "RUF010_explicit-f-string-type-conversion",
        "title": "explicit-f-string-type-conversion (RUF010)",
        "description": "Checks for uses of str(), repr(), and ascii() as explicit type\nconversions within f-strings."
    },
    {
        "patternId": "RUF012_mutable-class-default",
        "title": "mutable-class-default (RUF012)",
        "description": "Checks for mutable default values in class attributes."
    },
    {
        "patternId": "RUF013_implicit-optional",
        "title": "implicit-optional (RUF013)",
        "description": "Checks for the use of implicit Optional in type annotations when the\ndefault parameter value is None."
    },
    {
        "patternId": "RUF015_unnecessary-iterable-allocation-for-first-element",
        "title": "unnecessary-iterable-allocation-for-first-element (RUF015)",
        "description": "Checks the following constructs, all of which can be replaced by\nnext(iter(...)):\nlist(...)[0]\ntuple(...)[0]\nlist(i for i in ...)[0]\n[i for i in ...][0]\nlist(...).pop(0)"
    },
    {
        "patternId": "RUF016_invalid-index-type",
        "title": "invalid-index-type (RUF016)",
        "description": "Checks for indexed access to lists, strings, tuples, bytes, and comprehensions\nusing a type other than an integer or slice."
    },
    {
        "patternId": "RUF017_quadratic-list-summation",
        "title": "quadratic-list-summation (RUF017)",
        "description": "Checks for the use of sum() to flatten lists of lists, which has\nquadratic complexity."
    },
    {
        "patternId": "RUF018_assignment-in-assert",
        "title": "assignment-in-assert (RUF018)",
        "description": "Checks for named assignment expressions (e.g., x := 0) in assert\nstatements."
    },
    {
        "patternId": "RUF019_unnecessary-key-check",
        "title": "unnecessary-key-check (RUF019)",
        "description": "Checks for unnecessary key checks prior to accessing a dictionary."
    },
    {
        "patternId": "RUF020_never-union",
        "title": "never-union (RUF020)",
        "description": "Checks for uses of typing.NoReturn and typing.Never in union types."
    },
    {
        "patternId": "RUF021_parenthesize-chained-operators",
        "title": "parenthesize-chained-operators (RUF021)",
        "description": "Checks for chained operators where adding parentheses could improve the\nclarity of the code."
    },
    {
        "patternId": "RUF022_unsorted-dunder-all",
        "title": "unsorted-dunder-all (RUF022)",
        "description": "Checks for __all__ definitions that are not ordered\naccording to an \"isort-style\" sort.\nAn isort-style sort orders items first according to their casing:\nSCREAMING_SNAKE_CASE names (conventionally used for global constants)\ncome first, followed by CamelCase names (conventionally used for\nclasses), followed by anything else. Within each category,\na natural sort\nis used to order the elements."
    },
    {
        "patternId": "RUF023_unsorted-dunder-slots",
        "title": "unsorted-dunder-slots (RUF023)",
        "description": "Checks for __slots__ definitions that are not ordered according to a\nnatural sort."
    },
    {
        "patternId": "RUF024_mutable-fromkeys-value",
        "title": "mutable-fromkeys-value (RUF024)",
        "description": "Checks for mutable objects passed as a value argument to dict.fromkeys."
    },
    {
        "patternId": "RUF026_default-factory-kwarg",
        "title": "default-factory-kwarg (RUF026)",
        "description": "Checks for incorrect usages of default_factory as a keyword argument when\ninitializing a defaultdict."
    },
    {
        "patternId": "RUF030_assert-with-print-message",
        "title": "assert-with-print-message (RUF030)",
        "description": "Checks for uses of assert expression, print(message)."
    },
    {
        "patternId": "RUF032_decimal-from-float-literal",
        "title": "decimal-from-float-literal (RUF032)",
        "description": "Checks for Decimal calls passing a float literal."
    },
    {
        "patternId": "RUF033_post-init-default",
        "title": "post-init-default (RUF033)",
        "description": "Checks for __post_init__ dataclass methods with parameter defaults."
    },
    {
        "patternId": "RUF034_useless-if-else",
        "title": "useless-if-else (RUF034)",
        "description": "Checks for useless if-else conditions with identical arms."
    },
    {
        "patternId": "RUF100_unused-noqa",
        "title": "unused-noqa (RUF100)",
        "description": "Checks for noqa directives that are no longer applicable."
    },
    {
        "patternId": "RUF101_redirected-noqa",
        "title": "redirected-noqa (RUF101)",
        "description": "Checks for noqa directives that use redirected rule codes."
    },
    {
        "patternId": "RUF200_invalid-pyproject-toml",
        "title": "invalid-pyproject-toml (RUF200)",
        "description": "Checks for any pyproject.toml that does not conform to the schema from the relevant PEPs."
    },
    {
        "patternId": "TRY002_raise-vanilla-class",
        "title": "raise-vanilla-class (TRY002)",
        "description": "Checks for code that raises Exception or BaseException directly."
    },
    {
        "patternId": "TRY003_raise-vanilla-args",
        "title": "raise-vanilla-args (TRY003)",
        "description": "Checks for long exception messages that are not defined in the exception\nclass itself."
    },
    {
        "patternId": "TRY004_type-check-without-type-error",
        "title": "type-check-without-type-error (TRY004)",
        "description": "Checks for type checks that do not raise TypeError."
    },
    {
        "patternId": "TRY201_verbose-raise",
        "title": "verbose-raise (TRY201)",
        "description": "Checks for needless exception names in raise statements."
    },
    {
        "patternId": "TRY203_useless-try-except",
        "title": "useless-try-except (TRY203)",
        "description": "Checks for immediate uses of raise within exception handlers."
    },
    {
        "patternId": "TRY300_try-consider-else",
        "title": "try-consider-else (TRY300)",
        "description": "Checks for return statements in try blocks."
    },
    {
        "patternId": "TRY301_raise-within-try",
        "title": "raise-within-try (TRY301)",
        "description": "Checks for raise statements within try blocks. The only raises\ncaught are those that throw exceptions caught by the try statement itself."
    },
    {
        "patternId": "TRY400_error-instead-of-exception",
        "title": "error-instead-of-exception (TRY400)",
        "description": "Checks for uses of logging.error instead of logging.exception when\nlogging an exception."
    },
    {
        "patternId": "TRY401_verbose-log-message",
        "title": "verbose-log-message (TRY401)",
        "description": "Checks for excessive logging of exception objects."
    }
]